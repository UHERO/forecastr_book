# Version control

RStudio has built in support for Git-based version control for a project. Check if Git is [installed](https://happygitwithr.com/install-git) by running `git --version` in the terminal. Git is included in Xcode command line tools, which can be installed by running `xcode-select --install` in the terminal. Provide your GitHub [user name and email](https://happygitwithr.com/hello-git) to Git via `usethis::use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")`. Next, [generate and store](https://happygitwithr.com/https-pat#tldr) a personal access token for GitHub via `usethis::create_github_token()` and `gitcreds::gitcreds_set()`, respectively. Finally, make sure version control is enabled in RStudio (RStudio > Global Options > Git/SVN > Enable version control interface for RStudio projects > check box or `usethis::use_blank_slate()`). This concludes the setup for Git and GitHub, making it possible to establish a connection between RStudio and GitHub.

Always [start setting up](https://happygitwithr.com/new-github-first) version control on GitHub. Even if you [already have a project](https://happygitwithr.com/existing-github-first) on your computer, begin by setting up a repository on GitHub. This can be done by clicking on the "+" in the top right corner of the GitHub website and selecting "New repository". Give the repository a name and description, make it public or private, add a readme file, and choose the R template for *.gitignore*. After creating the repository, copy the URL and open RStudio. Create a new project from version control by selecting File > New Project > Version Control > Git and pasting the URL in the "Repository URL" field. Use the repository name as the project directory name. Choose a folder on your computer where the project will be stored locally and click "Create". This will clone the repository to your computer and create a new RStudio project. The project is now connected to the repository on GitHub. 

The "local" setup described above can be automated with `usethis::create_from_github("repo_url", "proj_dir")`. If you have permission to push to the "remote" GitHub repository because you are an owner or collaborator on the project, then `create_from_github` will [clone it](https://happygitwithr.com/existing-github-first#git-clone-usethis-rstudio). If you do not have parmission to push to the repository, `create_from_github` will [fork and clone it](https://happygitwithr.com/fork-and-clone#fork-and-clone-create-from-github). 


workflows

## A quick overview:

TL;DR: https://inbo.github.io/git-course/index.html

## Git step by step

If you don't have Git, install it:\
https://happygitwithr.com/install-git.html

Make sure .gitignore contains the following files:\
.Renviron\
.Rprofile

Introduce yourself to Git:\
In the shell (Terminal tab in RStudio):\
git config --global user.name 'Jane_Doe'\
git config --global user.email 'jane\@example.com'\
git config --global --list

library(usethis)
use_git_config(user.name = "Jane Doe", user.email = "jane\@example.org")\

For more advanced tasks, use GitHub Desktop:\
https://desktop.github.com

Generate and store your GitHub PAT (Personal Access Token):\
https://happygitwithr.com/https-pat.html\
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

Use one of three ways to add your project to GitHub:\
Brand new project:\
https://happygitwithr.com/new-github-first.html\
Existing project without version control:\
https://happygitwithr.com/existing-github-first.html\
Existing project under local version control:\
https://happygitwithr.com/existing-github-last.html

Troubleshooting if RStudio can't detect Git:\
https://happygitwithr.com/rstudio-see-git.html

Git vocabulary:\
https://happygitwithr.com/git-basics.html

Remote setups (try to stick to GitHub first discussed above):\
https://happygitwithr.com/common-remote-setups.html

Useful Git workflows and dealing with conflicts:\
https://happygitwithr.com/workflows-intro.html\
https://happygitwithr.com/push-rejected.html\
https://happygitwithr.com/pull-tricky.html

Additional resources:\
https://happygitwithr.com/ideas-for-content.html

## Suggested workflow

1)  Initialize repository on GitHub.com under the UHERO account.\
2)  Clone it via RStudio project setup.\
3)  Commit changes, pull, resolve issues, push.\
    3\*) If work in a branch (create in RStudio), commit to branch, (pull) push to remote, pull request on GitHub.com from branch to main, merge, delete branch on GitHub.com.

See these detailed guides: https://inbo.github.io/git-course/index.html https://github.com/llendway/github_for_collaboration/blob/master/github_for_collaboration.md

Another research workflow based on Github: https://www.carlboettiger.info/2012/05/06/research-workflow.html

Letâ€™s start a new project:

Start a new project on GitHub:
Login to your GitHub account.
Click on New on the left side where your repositories are displayed.
Give your project repository a meaningful name. For this course you could name it: efficient-data-management.
Click Create repository.
Copy the URL to the repository, it will look something like this: https://github.com/<username>/efficient-data-management.git
Open the project in RStudio:
Open RStudio.
Click on File > New Project....
Create a new project from Version Control.
Choose Git.
Paste the URL to the repository in Repository URL.
Choose a folder on your computer where the project will be stored locally.
And finally click on Create.



The [`renv` package]() facilitates sharing a project and maintaining the same behavior on different machines. It creates a local package directory for the project. This means that it keeps track of all the packages and package versions that are used in the project. If someone else wants to work with the exact same package environment to reproduce the results, they can restore it from the `renv` package directory.

Leveraging git and renv at the end of a working session

Now that we have our nice project setup, we should not forget to leverage it. At the end of a working session you should follow the following steps:

Create a renv::snapshot() to save all the packages you used to your local package directory.
Commit all your changes to git. This can be easily done by using the Git pane in RStudio.
Push everything to GitHub.
Whenever you re-open your Rproject, make sure to start your working session with a Pull from GitHub. That way, you will always work with the most recent version of your project.

Collaborating with `renv`: https://rstudio.github.io/renv/articles/collaborating.html

TL;DR: https://inbo.github.io/git-course/index.html
https://happygitwithr.com/