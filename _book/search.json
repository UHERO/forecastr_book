[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "User guide to UHERO’s forecast processes",
    "section": "",
    "text": "1 About\nThis document describes some useful practices for using R for applied research, especially in the time series and forecasting domain. It also serves as a guide for contributors to the forecastr R project. The focus of the project is forecasting using multi-equation behavioral models. The project encompasses data preparation, model selection (work in progress), external forecast generation, local forecast generation (planned), simulations (planned), and forecast distribution to a more granular scale.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About</span>"
    ]
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "User guide to UHERO’s forecast processes",
    "section": "1.1 Contents",
    "text": "1.1 Contents\nChapters 2 - 4 discuss the general setup of a collaborative project environment under version control. Chapter 5 deals with the setup file that configures the most general aspects of the forecastr project. Chapter 6 describes useful functions for time series manipulation and forecasting. Chapter 7 gives examples of best practices for time series manipulation. Chapter 8 describes a forecasting workflow from model selection to simulation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About</span>"
    ]
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "2  Projects",
    "section": "",
    "text": "2.1 Project setup and conventions\nCreate a new project locally in RStudio under the File menu or using usethis::create_project(\"proj_dir\"). The .Rproj file contains the project settings. Open the project by double clicking this file in Finder. The minimum structure of a project includes an R folder for scripts, a data folder for data, and an output folder for reports and plots. If present, the data/raw folder contains data external to the project and the data/processed folder contains intermediate processed data. Although local projects are sometimes useful to explore an idea, whenever you consider version tracking or collaboration, the project should be initiated from GitHub (see Chapter 3 for details).\nUse the renv package to store information about the packages used in the project. The renv package facilitates sharing a project and maintaining the same behavior on different machines. It creates a local package directory for the project. This means that it keeps track of all the packages and package versions that are used in the project, and collaborators can restore the exact same package environment and reproduce the results (see Chapter 4 for details).\nUse the here package to create paths relative to the project root. For example, here::here(\"data\", \"raw/file.csv\") returns the path to the file file.csv in the data/raw folder. Load libraries and put hard coded lines at the top of the script. Use the conflicted package to detect conflicts across packages and assign preferences. For example, conflict_prefer(\"filter\", \"dplyr\") assigns preference to the filter function in the dplyr package over the filter function in the stats package. Don’t save the workspace on exit (Tools &gt; Global Options &gt; General &gt; Save workspace to .RData on exit &gt; Never or usethis::use_blank_slate()).\nStart each pipe with a comment, and if necessary add comments to each line. Enable Github Copilot for RStudio; it is free for higher education users. Github Copilot will suggest code based on comments, which you can accept with the tab key. Use sectioning comments (# comments followed by at least four dashes —-) to separate different parts of the script (they show up in the outline section of the editor pane). Use the addin provided by styler package to format the code. Follow the tidyverse “dialect” and syntax.\nUse R scripts for coding; don’t put the analysis into chunks in markdown documents. Only render important results in code chunks of quarto (qmd) or Rmarkdown (Rmd) documents. Within a qmd or Rmd document source the R script containing the analysis. Alternatively, save the entire workspace or individual objects from the R script, and then load these in the appropriate code chunks of the markdown document. Make sure the code chunks are looking for objects in the correct working directory.\nStore secrets, passwords, and keys with the keyring package. For example, set the UDAMAN token with keyring::key_set_with_value(service = \"udaman_token\", password = \"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\") and retrieve it with keyring::key_get(\"udaman_token\"). To avoid disclosing your secrets, do not store/assign the retrieved credentials to a variable. If security is not a concern, environment variables, such as API keys, can also be stored in a project specific .Renviron file; it must end with \\n. In addition to .Renviron, the .Rprofile file is also executed each time R starts up. The latter typically contains a script with options and startup tasks. Both files are located in the project root folder.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Projects</span>"
    ]
  },
  {
    "objectID": "project.html#additional-resources",
    "href": "project.html#additional-resources",
    "title": "2  Projects",
    "section": "2.2 Additional resources",
    "text": "2.2 Additional resources\nOverview of R setup:\nhttps://rstats.wtf\nBest practices:\nhttps://kdestasio.github.io/post/r_best_practices/\nConsiderations for structuring projects:\nhttps://www.r-bloggers.com/2018/08/structuring-r-projects/\nSet up your work in projects:\nhttps://r4ds.hadley.nz/workflow-scripts#projects\nEfficient data management in R:\nhttps://www.r-bloggers.com/2020/02/efficient-data-management-in-r/\nEfficient R programming:\nhttps://csgillespie.github.io/efficientR/\nData science workflow:\nhttp://dcl-workflow.stanford.edu",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Projects</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "3  Version control",
    "section": "",
    "text": "3.1 Version control terms in Git(Hub)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#version-control-terms-in-github",
    "href": "git.html#version-control-terms-in-github",
    "title": "3  Version control",
    "section": "",
    "text": ".gitignore: A file that specifies which files and directories should be excluded from version control.\nBranch: A separate line of development or parallel version of the repository. Branches are used to develop features or fix bugs without affecting the main branch.\nClone: A copy of a repository on your local machine. Cloning a repository allows you to work on the project locally.\nCommit: A snapshot of the project at a specific point in time. Commits are used to save changes to the repository.\nConflict: When two branches have made changes to the same line in a file, a conflict occurs. Conflicts need to be resolved before the changes can be merged.\nFork: A copy of a repository on GitHub. This copy is independent of the original and you can make changes to it without affecting the original project.\nHEAD: A reference to the most recent commit in the repository, tip of the branch that is currently checked out.\nMain or Master: The default branch in a Git repository.\nMerge: Combining changes from one branch into another branch.\nOrigin: The default name of primary version of the repository on GitHub.\nPull: Getting changes from GitHub to your local repository.\nPull request: A request to merge proposed changes from one branch into another branch. Pull requests are used to review and discuss changes before merging them into the main branch.\nPush: Sending changes from your local repository to GitHub.\nRemote: A remote repository on GitHub that you can pull from and push to.\nRepository: A folder that contains all the files and history of a project. There can be a local repository (on your computer) and a remote repository (hosted on GitHub).\nStage: Staging allows you to select which changes should be included in the next commit.\nUpstream: The original repository that you forked from on GitHub.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#version-control-setup",
    "href": "git.html#version-control-setup",
    "title": "3  Version control",
    "section": "3.2 Version control setup",
    "text": "3.2 Version control setup\nRStudio has built in support for Git-based version control for a project. Check if Git is installed by running git --version in the terminal. Git is included in Xcode command line tools, which can be installed by running xcode-select --install in the terminal. Provide your GitHub user name and email to Git via usethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\"). Next, generate and store a personal access token for GitHub via usethis::create_github_token() and gitcreds::gitcreds_set(), respectively. Finally, make sure version control is enabled in RStudio (RStudio &gt; Global Options &gt; Git/SVN &gt; Enable version control interface for RStudio projects &gt; check box or usethis::use_blank_slate()). This concludes the setup for Git and GitHub, making it possible to establish a connection between RStudio and GitHub.\nAlways start setting up version control on GitHub. Even if you already have a project on your computer, begin by setting up a repository on GitHub. This can be done by clicking on the “+” in the top right corner of the GitHub website and selecting “New repository”. Give the repository a name and description, make it public or private, add a readme file, and choose the R template for .gitignore. After creating the repository, copy the URL and open RStudio. The next paragraph describes a robust local setup method with the usethis package, but there is also a menu based option: create a new project from version control by selecting File &gt; New Project &gt; Version Control &gt; Git and pasting the URL in the “Repository URL” field. Use the repository name as the project directory name. Choose a folder on your computer where the project will be stored locally and click “Create”. This will clone the repository to your computer and create a new RStudio project. The project is now connected to the repository on GitHub.\nThe local setup described above can be automated with usethis::create_from_github(\"repo_url\", \"proj_dir\"). If you have permission to push to the remote GitHub repository because you are an owner or collaborator on the project, then create_from_github will clone it. If you do not have parmission to push to the repository, create_from_github will fork and clone it. In either case, do not work in the main branch. Instead, create a “dev” branch in RStudio and work in that branch: in the Git pane, click on the “New Branch”, enter “dev” as the branch name, keep the remote origin, and chek the sync with remote box. This will create a new branch and switch to it.\nWhile in the dev branch, make changes to scripts or other files and save them. When you are ready to commit the changes, stage the files in the Git pane (“Command a” selects all files), click “Commit” at the top of the Git pane. In the pop-up window, the “Diff” button allows you to browse the changes made to the files in the repository, while the “History” button shows the commit history of the repository. These can be analyzed more conveniently on GitHub as described below in Section 3.3. Enter a commit message in the text box, and click the “Commit” button. Then push the changes to the remote repository. Go to the GitHub page of the dev branch and create a pull request to merge the dev branch into the main branch of the remote repository. After the pull request is merged, delete the dev branch on GitHub. Delete the local dev branch by executing git branch -d dev in the terminal. Finally, switch back to the main branch in RStudio and pull the changes from the remote repository.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#sec-browse-commits",
    "href": "git.html#sec-browse-commits",
    "title": "3  Version control",
    "section": "3.3 Time travel on GitHub",
    "text": "3.3 Time travel on GitHub\nFrom your repo’s landing page, access commit history by clicking on “123 Commits” under the green Code button. Once you’re viewing the history, notice three ways to access more info for each commit:\n\nThe clipboard icon copies the SHA of the commit. This can be handy if you need to refer to this commit elsewhere, e.g. in an issue thread or a commit message or in a Git command you’re forming for local execution.\nClick on the abbreviated SHA itself in order to the view the diff associated with the commit.\nClick on the double angle brackets &lt;&gt; to browse the state of the entire repo at that point in history.\n\nBack out of any drilled down view by clicking on YOU/REPO to return to your repo’s landing page. This brings you back to the present state and top-level of your repo.\nOnce you’ve identified a relevant commit, diff, or file state, you can copy the current URL from your browser and use it to enhance online discussion elsewhere, i.e. to bring other people to this exact view of the repo. The hyperlink-iness of repos hosted on GitHub can make online discussion of a project much more precise and efficient.\nWhat if you’re interested in how a specific file came to be the way it is? First navigate to the file in the repo, then notice “Blame” on the left and “History” in the upper right.\n\nThe “blame” view of a file reveals who last touched each line of the file, how long ago, and the associated commit message. Click on the commit message to visit that commit. Or click the “stacked rectangles” icon to move further back in time, but staying in blame view. This is handy when doing forensics on a specific and small set of lines.\nThe “history” view for a file is very much like the overall commit history described above, except it only includes commits that affect the file of interest. This can be handy when your inquiry is rather diffuse and you’re trying to digest the general story arc for a file.\n\nWhen viewing a file on GitHub, you can click on a line number to highlight it. Use “click … shift-click” to select a range of lines. Notice your browser’s URL shows something of this form: https://github.com/OWNER/REPO/blob/SHA/path/to/file.R#L27-L31 If the URL does not contain the SHA, type “y” to toggle into that form. These file- and SHA-specific URLs are a great way to point people at particular lines of code in online conversations. It’s best practice to use the uglier links that contain the SHA, as they will stand the test of time.\nSearch is always available in the upper-righthand corner of GitHub. Once you enter some text in the search box, a dropdown provides the choice to search in the current repo (the default) or all of GitHub. GitHub searches the contents of files (described as “Code”), commit messages, and issues. Take advantage of the search hits across these different domains. Again, this is a powerful way to zoom in on specific lines of code, revisit an interesting time in project history, or re-discover a conversation thread.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#version-control-workflow",
    "href": "git.html#version-control-workflow",
    "title": "3  Version control",
    "section": "3.4 Version control workflow",
    "text": "3.4 Version control workflow\nAfter the initial setup, the workflow should always follow the following sequence:\n\nin the local/main branch, click on the “Pull” button in the Git pane to pull changes from the main branch of the remote repository, which is\n\nupstream if the repository was forked,\norigin if the repository was cloned,\n\nin the case of forked repo, after pulling from upstream, push to origin,\ncreate a new dev branch and switch to it,\nmake changes in the dev branch,\ncommit changes in the dev branch,\npush changes to the dev branch of the remote origin repository,\ncreate a pull request on GitHub to merge the origin dev branch a) into upstream main if the repository was forked, b) into origin main if the repository was cloned,\nmerge the pull request (or wait for it to be merged by the owner),\nafter merging, delete the dev branch on the remote and locally,\nrepeat step 1. (and then repeat it again before you resume your work on the project).\n\nThis workflow is recommended to avoid conflicts with other collaborators.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#dealing-with-conflicts",
    "href": "git.html#dealing-with-conflicts",
    "title": "3  Version control",
    "section": "3.5 Dealing with conflicts",
    "text": "3.5 Dealing with conflicts\nIf a push is rejected, pull the changes from the remote repository. If there are conflicts, resolve them by editing the files and committing the changes. Every merge conflict inserts three delimiters:\n&lt;&lt;&lt;&lt;&lt;&lt; feature branch name, the start of the merge conflict\n====== the separator between the content of both branches\n&gt;&gt;&gt;&gt;&gt;&gt; base branch name, the end of the merge conflict\n\nFix the merge conflict by directly editing the script at the indicated locations. Often you can fix it by simply deleting the content of one of the branches within the conflict. Potentially you need to keep a mix of both. Don’t forget to also delete the three delimiters when you’re ready.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "git.html#additional-resources",
    "href": "git.html#additional-resources",
    "title": "3  Version control",
    "section": "3.6 Additional resources",
    "text": "3.6 Additional resources\nVisual Git guide:\nhttps://inbo.github.io/git-course/index.html\nExhaustive discussion of Git for R users:\nhttps://happygitwithr.com\nA research workflow based on Github:\nhttps://www.carlboettiger.info/2012/05/06/research-workflow.html\nFor more advanced tasks, use GitHub Desktop:\nhttps://desktop.github.com",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version control</span>"
    ]
  },
  {
    "objectID": "renv.html",
    "href": "renv.html",
    "title": "4  Package management",
    "section": "",
    "text": "4.1 Getting started\nTo convert a project to use renv, call renv::init(). This adds three new files and directories to the project:\nThe next important pair of tools is renv::snapshot() and renv::restore(). snapshot() updates the lockfile with metadata about the currently-used packages in the project library. Sharing the lockfile allows other people or other computers to reproduce the current project environment by running restore(), which uses the metadata from the lockfile to install exactly the same version of every package. This pair of functions provides the benefits of reproducibility and portability: you are now tracking exactly which package versions you have installed so you can recreate them on other machines.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#getting-started",
    "href": "renv.html#getting-started",
    "title": "4  Package management",
    "section": "",
    "text": "The project library, renv/library, is a library that contains all packages currently used by the project1. This is the key magic that makes renv work: instead of having one library containing the packages used in every project, renv gives you a separate library for each project. This provides the benefits of isolation: different projects can use different versions of packages, and installing, updating, or removing packages in one project doesn’t affect any other project.\nThe lockfile, renv.lock, records enough metadata about every package that it can be re-installed on a new machine.\nrenv uses .Rprofile to configure the R session to use the project library. This ensures that once renv is turned on for a project, it stays on, until it is deliberately turned off.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#collaboration",
    "href": "renv.html#collaboration",
    "title": "4  Package management",
    "section": "4.2 Collaboration",
    "text": "4.2 Collaboration\nOne of the reasons to use renv is to make it easier to share code in such a way that everyone gets exactly the same package versions. As above, start by calling renv::init(). You’ll then need to commit renv.lock, .Rprofile, renv/settings.json and renv/activate.R to version control, ensuring that others can recreate your project environment. If you’re using git, this is particularly simple because renv will create a .gitignore, and you can just commit all suggested files.\nNow when one of your collaborators opens this project, renv will automatically bootstrap itself, downloading and installing the appropriate version of renv. It will also ask them if they want to download and install all the packages it needs by running renv::restore().",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#installing-packages",
    "href": "renv.html#installing-packages",
    "title": "4  Package management",
    "section": "4.3 Installing packages",
    "text": "4.3 Installing packages\nIf you use renv for multiple projects, you’ll have multiple libraries, meaning that you’ll often need to install the same package in multiple places. It would be annoying if you had to download (or worse, compile) the package repeatedly, so renv uses a package cache. That means you only ever have to download and install a package once, and for each subsequent install, renv will just add a link from the project library to the global cache. You can learn more about the cache in vignette(\"package-install\").\nAfter installing the package and checking that the code works, you should call renv::snapshot() to record the latest package versions in your lockfile. If you’re collaborating with others, you’ll need to commit those changes to git, and let them know that you’ve updated the lockfile and they should call renv::restore() when they’re next working on a project.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#updating-packages",
    "href": "renv.html#updating-packages",
    "title": "4  Package management",
    "section": "4.4 Updating packages",
    "text": "4.4 Updating packages\nRegularly (at least once a year) update the packages in your project to get the latest versions of all dependencies. Similarly, if you’re making major changes to a project that you haven’t worked on for a while, it’s often a good idea to start with an renv::update()2 before making any changes to the code.\nAfter calling renv::update(), you should run the code in your project and verify that it still works (or make any changes needed to get it working). Then call renv::snapshot() to record the new versions in the lockfile. If you get stuck, and can’t get the project to work with the new versions, you can call renv::restore() to roll back changes to the project library and revert to the known good state recorded in your lockfile. If you need to roll back to an even older version, take a look at renv::history() and renv::revert(). renv::update() will also update renv itself, ensuring that you get all the latest features.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#workflow-for-setting-up-a-project-with-version-control-and-renv",
    "href": "renv.html#workflow-for-setting-up-a-project-with-version-control-and-renv",
    "title": "4  Package management",
    "section": "4.5 Workflow for setting up a project with version control and renv",
    "text": "4.5 Workflow for setting up a project with version control and renv\nThe combination of version control and package management can facilitate reproducibility and collaboration.\n\nSet up a repository on GitHub\nClone the repo with usethis::create_from_github()\nInitialize renv with renv::init()\nEdit a script, install packages, run the script\nStore info about installed packages with renv::snapshot()\nSync the project state with GitHub by committing and pushing up the changes\nCollaborators (fork and) clone the repo, and install the necessary packages with renv::restore()\nIn subsequent work,\n\npull the current state of the repo from GitHub,\nrun renv::restore() to install the necessary packages,\nedit the script, install new packages, run the script,\nrun renv::snapshot(),\npush changes to GitHub and place a pull request if necessary.\n\n\nThis process ensures that you will always work with the most recent version of your project.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#additional-resources",
    "href": "renv.html#additional-resources",
    "title": "4  Package management",
    "section": "4.6 Additional resources",
    "text": "4.6 Additional resources\nOverview of renv:\nhttps://rstudio.github.io/renv/articles/renv.html",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "renv.html#footnotes",
    "href": "renv.html#footnotes",
    "title": "4  Package management",
    "section": "",
    "text": "If you’d like to skip dependency discovery, you can call renv::init(bare = TRUE) to initialize a project with an empty project library.↩︎\nYou can also use update.packages(), but renv::update() works with the same sources that renv::install() supports.↩︎",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Package management</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "5  Setup of the forecastr project",
    "section": "",
    "text": "5.1 Start with a clean slate\nFirst remove all objects from global environment:\nrm(list = ls())\nIf only some objects need to be removed, search for them via wildcards:\nrm(list = ls(pattern = glob2rx(\"*__*\")))\nDetach all loaded packages:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Setup of the forecastr project</span>"
    ]
  },
  {
    "objectID": "setup.html#start-with-a-clean-slate",
    "href": "setup.html#start-with-a-clean-slate",
    "title": "5  Setup of the forecastr project",
    "section": "",
    "text": "if (!is.null(names(sessionInfo()$otherPkgs))) {\ninvisible(\n  suppressMessages(\n    suppressWarnings(\n      lapply(\n        paste(\"package:\", names(sessionInfo()$otherPkgs), sep=\"\"), \n        detach, \n        character.only = TRUE, \n        unload = TRUE\n        )\n      )\n    )\n  )\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Setup of the forecastr project</span>"
    ]
  },
  {
    "objectID": "setup.html#packages",
    "href": "setup.html#packages",
    "title": "5  Setup of the forecastr project",
    "section": "5.2 Packages",
    "text": "5.2 Packages\nThe setup file clarifies its own location relative to the project root and loads the necessary packages.\nNavigate within a project using the here() package. Start by specifying:\nhere::i_am(\"R/setup.R\")\nThen load necessary packages\n# load necessary packages\nlibrary(here) # navigation within the project\nlibrary(conflicted) # detect conflicts across packages\nlibrary(tidyverse) # a set of frequently used data-wrangling tools\nlibrary(magrittr) # more than just pipes\nlibrary(lubridate) # dealing with dates\nlibrary(tsbox) # dealing with time series\nlibrary(\"pins\")\n# library(bimets)\n# install.packages(\"devtools\")\n# devtools::install_github(\"UHERO/fcutils\")\n# renv::purge(\"fcutils\")\nlibrary(\"fcutils\")\nDetect conflicts across packages and assign preferences\nconflicted::conflict_scout()\nconflicted::conflict_prefer(\"filter\", \"dplyr\") # dplyr v stats\nconflicted::conflict_prefer(\"first\", \"dplyr\") # dplyr v xts\nconflicted::conflict_prefer(\"lag\", \"dplyr\") # dplyr v stats\nconflicted::conflict_prefer(\"last\", \"dplyr\") # dplyr v xts\nconflicted::conflict_prefer(\"extract\", \"magrittr\") # magrittr vs tidyr\nconflicted::conflict_prefer(\"set_names\", \"magrittr\") # magrittr vs purrr\nVerify top level project directory here::here().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Setup of the forecastr project</span>"
    ]
  },
  {
    "objectID": "setup.html#package-descriptions",
    "href": "setup.html#package-descriptions",
    "title": "5  Setup of the forecastr project",
    "section": "5.3 Package descriptions",
    "text": "5.3 Package descriptions\n\n\n\n\nOnly load essential packages with many useful functions (don’t load a whole package to access a single function). Refer to individual functions in packages that are not loaded by namespace::function().\n\n\n\n\nCore tidyverse packages.\n\nNon-core tidyverse packages (need to be loaded separately):\n\n\nmagrittr\n\nlubridate\n\nTime series tools in tsbox (learn them and use them, very useful). All start with ts_.\n\nLoad the fcutils package for utility functions.\n\nForecasting with multi-equation behavioral models: only the load bimets pakage if actually doing forecasts, no need for data manipulation.\n\nbimets depends on the xts package (if not loaded, can access necessary functions via xts::function()). Prefer using tsbox and tidyverse functions whenever possible, but understand the components and behavior of xts objects.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Setup of the forecastr project</span>"
    ]
  },
  {
    "objectID": "fcutils.html",
    "href": "fcutils.html",
    "title": "6  Utility functions",
    "section": "",
    "text": "6.1 Input-output and data generation",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#sec-io",
    "href": "fcutils.html#sec-io",
    "title": "6  Utility functions",
    "section": "",
    "text": "6.1.1 fcutils::get_series()\n\n6.1.1.1 Description\nDownload a set of series from udaman using series names\n\n\n6.1.1.2 Usage\nget_series(\n  ser_id_vec,\n  format = \"wide\",\n  expand,\n  raw = TRUE,\n  rename = \"compact\",\n  freq = NULL,\n  descr = FALSE,\n  public = FALSE\n)\n\n\n6.1.1.3 Arguments\n\n\n\nser_id_vec\nvector of series names (character)\n\n\nformat\n\"wide\" (default) or \"long\" or \"xts\"\n\n\nexpand\nDEPRECATED, USE raw INSTEAD \"true\" (default) or \"raw\" (\"true\" downloads formatted data, \"raw\" downloads raw units)\n\n\nraw\nTRUE (default) or FALSE (TRUE downloads raw data, FALSE downloads scaled and rounded data)\n\n\nrename\n\"compact\" (default), \"full\", \"no\". \"compact\": @ replaced by _ and no frequency; \"full\": @ replaced by AT and . by _; \"no\": no renaming, keep UDAMAN names\n\n\nfreq\nif frequency is missing from series names (or want to modify freq in existing names) specify frequency (character), e.g. \"M\".\n\n\ndescr\nif TRUE add to the udaman series name the series description in parentheses (default: FALSE)\n\n\npublic\nif TRUE use the public API interface - does not require VPN (default: FALSE)\n\n\n\n\n\n6.1.1.4 Details\nThis function requires permission to access UDAMAN. Store the udaman token in the .Renviron file using the following format: udaman_token = \"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\" Or using fcutils::set_udaman_token(\"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\") Or store the udaman token among your credentials (e.g. keychain) using keyring: keyring::key_set_with_value(service = \"udaman_token\", password = \"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\")\n\n\n6.1.1.5 Value\ntime and data for all series combined in an object specified by the format option\n\n\n6.1.1.6 Examples\nget_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\"), raw = TRUE)\nget_series(c(\"VEXP_RB@HI.M\"))\nget_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\"), public = TRUE)\nget_series(c(\"VISNS@HI.M\", \"VISUSNS@HI.M\"), freq = \"Q\")\nget_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\"), format = \"xts\")\nget_series(c(\"VISNS@HI.M\"), format = \"xts\")\nget_series(c(\"VISNS@HI.M\"), format = \"xts\", descr = TRUE)\nget_series(c(\"E_NF_HI\", \"ECT_HI\", \"E_TU_HAW\"), freq = \"M\")\nget_series(c(\"E_NF__HI_M\", \"ECT__HI_M\", \"VAP__HI_W\"))\nget_series(c(\"E_NF_AT_HI_M\", \"ECT_AT_HI_M\", \"VAP_AT_HI_W\"))\n\n\n\n6.1.2 fcutils::get_series_exp()\n\n6.1.2.1 Description\nDownload series listed in an export table from udaman\n\n\n6.1.2.2 Usage\nget_series_exp(\n  exp_id,\n  format = \"wide\",\n  expand,\n  raw = TRUE,\n  rename = \"compact\",\n  descr = FALSE,\n  public = FALSE,\n  save_loc = NULL\n)\n\n\n6.1.2.3 Arguments\n\n\n\nexp_id\nexport id (character or numeric)\n\n\nformat\n\"wide\" (default) or \"long\" or \"xts\"\n\n\nexpand\nDEPRECATED, USE raw INSTEAD \"true\" or \"raw\" (\"true\" downloads formatted data, \"raw\" downloads raw units)\n\n\nraw\nTRUE (default) or FALSE (TRUE downloads raw data, FALSE downloads scaled and rounded data)\n\n\nrename\n\"compact\" (default), \"full\", \"no\". \"compact\": @ replaced by _ and no frequency; \"full\": @ replaced by AT and . by _; \"no\": no renaming, keep UDAMAN names\n\n\ndescr\nif TRUE add to the udaman series name the series description in parentheses (default: FALSE)\n\n\npublic\nif TRUE use the public API interface - does not require VPN (default: FALSE)\n\n\nsave_loc\nfile path for saving data incl. extension (\"html\" or \"csv\") (default NULL)\n\n\n\n\n\n6.1.2.4 Details\nThis function requires permission to access UDAMAN. Store the udaman token in the .Renviron file using the following format: udaman_token = \"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\" Or using fcutils::set_udaman_token(\"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\") Or store the udaman token among your credentials (e.g. keychain) using keyring: keyring::key_set_with_value(service = \"udaman_token\", password = \"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\")\n\n\n6.1.2.5 Value\ntime and data for all series combined in a tibble\n\n\n6.1.2.6 Examples\nget_series_exp(exp_id = 74)\nget_series_exp(74, format = \"xts\")\n\n\n\n6.1.3 fcutils::set_udaman_token()\n\n6.1.3.1 Description\nSet udaman token for API access\n\n\n6.1.3.2 Usage\nset_udaman_token(key)\n\n\n6.1.3.3 Arguments\n\n\n\nkey\na string containing 44 characters\n\n\n\n\n\n6.1.3.4 Details\nSave the token in .Renviron as udaman_token = key.\n\n\n6.1.3.5 Value\ntrue if setting the token in .Renviron succeeded\n\n\n6.1.3.6 Examples\nset_udaman_token(\"-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=\")\n\n\n\n6.1.4 fcutils::make_xts()\n\n6.1.4.1 Description\nCreate xts and fill with values\n\n\n6.1.4.2 Usage\nmake_xts(start = bnk_start, end = NULL, per = \"year\", val = NA_real_)\n\n\n6.1.4.3 Arguments\n\n\n\nstart\ndate of series start (character: \"yyyy-mm-dd\", \"yyyyqq\", \"yyyy\")\n\n\nend\ndate of series end (character: \"yyyy-mm-dd\", \"yyyyqq\", \"yyyy\")\n\n\nper\nperiodicity of series (character: \"year\" - default) if date format of start is quarterly, automatically set to \"quarter\"\n\n\nval\nvalues to fill in (numeric scalar, vector, or tibble)\n\n\n\n\n\n6.1.4.4 Details\nwhen end is missing, but val is a vector of more than one element, the end date is automatically determined by the length of the val vector. if end is missing and val is a scalar, the end date is set to bnk_end. if end is missing the remaining arguments have to be named. if val is a tibble, the end date is automatically determined by the number of rows in the tibble.\n\n\n6.1.4.5 Value\nan xts series\n\n\n6.1.4.6 Examples\nmake_xts()\nmake_xts(val = 0, per = \"m\")\nmake_xts(start = 20100101, per = \"quarter\", val = 0)\nmake_xts(start = 2010.1, per = \"q\", val = 1:10)\nmake_xts(2010.1, val = 1:10) ## automatically set per = \"quarter\"\nmake_xts(start = \"2010-01-01\", per = \"m\", val = 0)\nmake_xts(start = 201001, per = \"q\",\n         val = tibble::tibble(E_NF_HON = c(1:10), ECT_HI = c(11:20)))\n\n\n\n6.1.5 fcutils::addf()\n\n6.1.5.1 Description\nCreate xts addfactor\n\n\n6.1.5.2 Usage\naddf(\n  start = bnk_start,\n  end = bnk_end,\n  from = 0,\n  to = 0,\n  ser_name = \"value\",\n  per = \"year\"\n)\n\n\n6.1.5.3 Arguments\n\n\n\nstart\nstart date of linear interpolation (character: \"yyyy-mm-dd\", \"yyyyqq\", \"yyyy\")\n\n\nend\nend date of linear interpolation (character: \"yyyy-mm-dd\", \"yyyyqq\", \"yyyy\")\n\n\nfrom\nfirst value for linear interpolation (numeric)\n\n\nto\nlast value for linear interpolation (numeric)\n\n\nser_name\nname of the xts series (string)\n\n\nper\nperiodicity of series (character: \"year\" - default) if date format of start is quarterly, automatically set to \"quarter\"\n\n\n\n\n\n6.1.5.4 Details\nthis is a wrapper around make_xts with some additional functionality. the start and end dates specify the span of the non-zero add-factor value. the remaining period between start and end is filled with zeros.\n\n\n6.1.5.5 Value\na single xts series spanning bnk_start-bnk_end\n\n\n6.1.5.6 Examples\naddf()\naddf(201002, 201504, 1, 2)\naddf(20100101, 20601201, 1, 2, per = \"month\")\naddf(20100101, from = 1, to = 2, per = \"quarter\")\naddf(2010.2, 2015.4, 1, 2, \"ECT_HI\")\n\n\n\n6.1.6 fcutils::copy_tbl()\n\n6.1.6.1 Description\nCopy a data frame to clipboard (only works on MacOS)\n\n\n6.1.6.2 Usage\ncopy_tbl(x, dec = 2)\n\n\n6.1.6.3 Arguments\n\n\n\nx\ntibble (or data frame) to be copied\n\n\ndec\nnumber of decimals to round numeric columns to (default: 2)\n\n\n\n\n\n6.1.6.4 Value\ncopy_tbl() returns the input x invisibly\n\n\n6.1.6.5 Examples\nmonthly_data_example |&gt; copy_tbl()\nmonthly_data_example |&gt; copy_tbl(1)\n\n\n\n6.1.7 fcutils::gen_table()\n\n6.1.7.1 Description\nGenerate a table with time series\n\n\n6.1.7.2 Usage\ngen_table(\n  x,\n  tbl_start = as.character(Sys.Date() - lubridate::years(10)),\n  tbl_end = as.character(Sys.Date() + lubridate::years(2)),\n  percent = \"pc\",\n  time_across = TRUE,\n  tbl_height = 800,\n  save_loc = NULL\n)\n\n\n6.1.7.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\ntbl_start\nstart period for table\n\n\ntbl_end\nend period for table\n\n\npercent\nwhat type of percent should be added (\"none\", \"pc\" (default), \"pcy\", \"pca\")\n\n\ntime_across\nshould time be in column headers and variable names in first column (default TRUE)\n\n\ntbl_height\nthe height of the table in px (default 800)\n\n\nsave_loc\nfile path for saving table incl. extension (\"html\" or \"csv\") (default NULL)\n\n\n\n\n\n6.1.7.4 Value\ntable formatted for output\n\n\n6.1.7.5 Examples\nquarterly_data_example %&gt;%\n  tsbox::ts_long() %&gt;%\n  tsbox::ts_tslist() %&gt;%\n  gen_table()\ngen_table(quarterly_data_example)\ngen_table(quarterly_data_example, percent = \"none\")\ngen_table(quarterly_data_example, percent = \"pcy\", time_across = FALSE)\n\ngen_table(quarterly_data_example,\n  percent = \"pcy\",\n  time_across = FALSE, save_loc = \"~/Downloads/temp.csv\"\n)\ngen_table(quarterly_data_example,\n  percent = \"pcy\", time_across = TRUE,\n  save_loc = \"~/Downloads/temp.html\"\n)\n\n\n\n6.1.8 fcutils::write_tsd()\n\n6.1.8.1 Description\nSave a ts-boxable object in tsd format\n\n\n6.1.8.2 Usage\nwrite_tsd(x, file)\n\n\n6.1.8.3 Arguments\n\n\n\nx\na ts-boxable object (only M, Q, A frequency)\n\n\nfile\ncharacter string denoting the location and name of the output file\n\n\n\n\n\n6.1.8.4 Value\nnothing (silently save the contents of the tsd file to a user defined location)\n\n\n6.1.8.5 Examples\nquarterly_data_example |&gt; write_tsd(\"out.tsd\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#sec-tsinfo",
    "href": "fcutils.html#sec-tsinfo",
    "title": "6  Utility functions",
    "section": "6.2 Time series info and date manipulation",
    "text": "6.2 Time series info and date manipulation\n\n6.2.1 tsbox::ts_summary()\n\n6.2.1.1 Description\nExtract time series properties, such as the number of observations (obs), the time differences between observations (obs), the number of observations per year (freq), and the start time stamp (start) and the end time stamp (end) of the series.\n\n\n6.2.1.2 Usage\nts_summary(x, spark = FALSE)\n\n\n6.2.1.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\nspark\nlogical should an additional column with a spark-line added to the data frame (experimental, ASCII only on Windows.)\n\n\n\n\n\n6.2.1.4 Value\nts_summary returns a data.frame. Individual column can be accessed through the $ notation (see examples).\n\n\n6.2.1.5 Examples\nts_summary(ts_c(mdeaths, austres))\nts_summary(ts_c(mdeaths, austres), spark = TRUE)\n## Extracting specific properties\nts_summary(AirPassengers)$start\nts_summary(AirPassengers)$freq\nts_summary(AirPassengers)$obs\n\n\n\n6.2.2 tsbox::ts_first_of_period()\n\n6.2.2.1 Description\nReplace date or time values by the first of the period. tsbox usually relies on timestamps being the first value of a period.\n\n\n6.2.2.2 Usage\nts_first_of_period(x)\n\n\n6.2.2.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.2.2.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.2.2.5 Examples\nx &lt;- ts_c(\n  a = ts_lag(ts_df(mdeaths), \"14 days\"),\n  b = ts_lag(ts_df(mdeaths), \"-2 days\")\n)\nts_first_of_period(x)\nts_first_of_period(ts_lag(ts_df(austres), \"14 days\"))\n\n\n\n6.2.3 tsbox::ts_regular()\n\n6.2.3.1 Description\nEnforces regularity in data frame and xts objects, by turning implicit NAs into explicit NAs. In ts objects, regularity is automatically enforced.\n\n\n6.2.3.2 Usage\nts_regular(x, fill = NA)\n\n\n6.2.3.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\nfill\nnumeric, instead of NA, an alternative value can be specified. E.g., 0, -99.\n\n\n\n\n\n6.2.3.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.2.3.5 Examples\nx0 &lt;- AirPassengers\nx0[c(10, 15)] &lt;- NA\nx &lt;- ts_na_omit(ts_dts(x0))\nts_regular(x)\nts_regular(x, fill = 0)\n\nm &lt;- mdeaths\nm[c(10, 69)] &lt;- NA\nf &lt;- fdeaths\nf[c(1, 3, 15)] &lt;- NA\n\nts_regular(ts_na_omit(ts_dts(ts_c(f, m))))\n\n\n\n6.2.4 tsbox::ts_na_omit()\n\n6.2.4.1 Description\nRemove NA values in ts-boxable objects, turning explicit into implicit missing values.\n\n\n6.2.4.2 Usage\nts_na_omit(x)\n\n\n6.2.4.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.2.4.4 Details\nNote that internal NAs in ts time series will not be removed, as this conflicts with the regular structure.\n\n\n6.2.4.5 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.2.4.6 See Also\nts_regular, for the opposite, turning implicit into explicit missing values.\n\n\n6.2.4.7 Examples\nx &lt;- AirPassengers\nx[c(2, 4)] &lt;- NA\n\n## A ts object does only know explicit NAs\nts_na_omit(x)\n\n## by default, NAs are implicit in data frames\nts_df(x)\n\n## make NAs explicit\nts_regular(ts_df(x))\n\n## and implicit again\nts_na_omit(ts_regular(ts_df(x)))\n\n\n\n6.2.5 tsbox::ts_span()\n\n6.2.5.1 Description\nFilter time series for a time span.\n\n\n6.2.5.2 Usage\nts_span(x, start = NULL, end = NULL, template = NULL, extend = FALSE)\n\n\n6.2.5.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\nstart\nstart date, character string of length 1, Date or POSIXct\n\n\nend\nend date, character string of length 1, Date or POSIXct.\n\n\ntemplate\nts-boxable time series, an object of class ts, xts, data.frame, data.table, or tibble. If provided, from and to will be extracted from the object.\n\n\nextend\nlogical. If true, the start and end values are allowed to extend the series (by adding NA values).\n\n\n\n\n\n6.2.5.4 Details\nAll date and times, when entered as character strings, are processed by anytime::anydate() or anytime::anytime(). Thus a wide range of inputs are possible. See examples.\nstart and end can be specified relative to each other, using one of \"sec\", \"min\", \"hour\", \"day\", \"week\", \"month\", ⁠\"quarter\" or ⁠\"year\", or an abbreviation. If the series are of the same frequency, the shift can be specified in periods. See examples.\n\n\n6.2.5.5 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.2.5.6 Examples\n## use 'anytime' shortcuts\nts_span(mdeaths, start = \"1979\")       ## shortcut for 1979-01-01\nts_span(mdeaths, start = \"1979-4\")     ## shortcut for 1979-04-01\nts_span(mdeaths, start = \"197904\")     ## shortcut for 1979-04-01\n\n## it's fine to use an to date outside of series span\nts_span(mdeaths, end = \"2001-01-01\")\n\n## use strings to set start or end relative to each other\n\nts_span(mdeaths, start = \"-7 month\")   ## last 7 months\nts_span(mdeaths, start = -7)           ## last 7 periods\nts_span(mdeaths, start = -1)           ## last single value\nts_span(mdeaths, end = \"1e4 hours\")    ## first 10000 hours\n\n\nts_plot(\n  ts_span(mdeaths, start = \"-3 years\"),\n  title = \"Three years ago\",\n  subtitle = \"The last three years of available data\"\n)\n\nts_ggplot(\n  ts_span(mdeaths, end = \"28 weeks\"),\n  title = \"28 weeks later\",\n  subtitle = \"The first 28 weeks of available data\"\n) + theme_tsbox() + scale_color_tsbox()\n\n\n## Limit span of 'discoveries' to the same span as 'AirPassengers'\nts_span(discoveries, template = AirPassengers)\nts_span(mdeaths, end = \"19801201\", extend = TRUE)\n\n\n\n6.2.6 fcutils::span()\n\n6.2.6.1 Description\nSpecify span of time series (wrapper around tsbox::ts_span())\n\n\n6.2.6.2 Usage\nspan(x, start = NULL, end = NULL, template = NULL, extend = FALSE)\n\n\n6.2.6.3 Arguments\n\n\n\nx\nts-boxable object to filter by span\n\n\nstart\nstart date (see examples)\n\n\nend\nend date (see examples)\n\n\ntemplate\nts-boxable time series (see tsbox::ts_span)\n\n\nextend\nlogical. If true, the start and end values are allowed to extend the series (by adding NA values).\n\n\n\n\n\n6.2.6.4 Value\nfiltered object of the same type as the input\n\n\n6.2.6.5 Examples\nquarterly_data_example |&gt;\n  span(2010.1)\nquarterly_data_example |&gt;\n  span(2010.1, 2010.4)\nquarterly_data_example |&gt;\n  span(\"2010-01-01\", \"2010-12-31\")\n\n\n\n6.2.7 fcutils::find_start()\n\n6.2.7.1 Description\nFind the date of the first observation (NAs are dropped)\n\n\n6.2.7.2 Usage\nfind_start(x)\n\n\n6.2.7.3 Arguments\n\n\n\nx\nts-boxable object\n\n\n\n\n\n6.2.7.4 Value\ndates associated with first observation\n\n\n6.2.7.5 Examples\nquarterly_data_example |&gt;\n  dplyr::mutate(E_NF_HI = dplyr::if_else(time &lt; \"2000-01-01\", NA_real_, E_NF_HI)) |&gt;\n  find_start()\n\n\n\n6.2.8 fcutils::find_end()\n\n6.2.8.1 Description\nFind the date of the last observation (NAs are dropped)\n\n\n6.2.8.2 Usage\nfind_end(x, last_day = FALSE)\n\n\n6.2.8.3 Arguments\n\n\n\nx\nts-boxable object\n\n\nlast_day\nshould the last day of period be returned (default: FALSE)\n\n\n\n\n\n6.2.8.4 Value\ndate associated with last observation\n\n\n6.2.8.5 Examples\nquarterly_data_example |&gt;\n  dplyr::mutate(E_NF_HI = dplyr::if_else(time &gt; \"2022-01-01\", NA_real_, E_NF_HI)) |&gt;\n  find_end()\nquarterly_data_example |&gt;\n  dplyr::mutate(E_NF_HI = dplyr::if_else(time &gt; \"2022-01-01\", NA_real_, E_NF_HI)) |&gt;\n  find_end(TRUE)\n\n\n\n6.2.9 fcutils::nmons()\n\n6.2.9.1 Description\nCalculate number of months between two dates yyyyMm, yyyy.m or yyyy-mm-dd\n\n\n6.2.9.2 Usage\nnmons(dat1 = \"\", dat2 = \"\")\n\n\n6.2.9.3 Arguments\n\n\n\ndat1\ndate of period start (string: yyyyMm, yyyy.m, or yyyy-mm-dd)\n\n\ndat2\ndate of period end (string: yyyyMm, yyyy.m, or yyyy-mm-dd)\n\n\n\n\n\n6.2.9.4 Details\nThe endpoints are included in the result so subtract one for time difference. Also, the result is rounded down so partial months are not counted. See examples.\n\n\n6.2.9.5 Value\nnumeric length of date range in months\n\n\n6.2.9.6 Examples\nnmons(\"2010M1\", \"2010M2\")\nnmons(2010.1, 2010.4)\nnmons(\"2010-01-15\", \"2010-04-15\")\nnmons(\"2010-01-15\", \"2010-04-18\")\nnmons(\"2010-01-15\", \"2010-04-12\")\n\n\n\n6.2.10 fcutils::nqtrs()\n\n6.2.10.1 Description\nCalculate number of quarters between two dates yyyyQq, yyyy.q or yyyy-mm-dd\n\n\n6.2.10.2 Usage\nnqtrs(dat1 = \"\", dat2 = \"\")\n\n\n6.2.10.3 Arguments\n\n\n\ndat1\ndate of period start (string: yyyyQq, yyyy.q, or yyyy-mm-dd)\n\n\ndat2\ndate of period end (string: yyyyQq, yyyy.q, or yyyy-mm-dd)\n\n\n\n\n\n6.2.10.4 Details\nThe endpoints are included in the result so subtract one for time difference. Also, the result is rounded down so partial quarters are not counted. See examples.\n\n\n6.2.10.5 Value\nnumeric length of date range in quarters\n\n\n6.2.10.6 Examples\nnqtrs(\"2010Q1\", \"2020Q4\")\nnqtrs(2010.1, 2020.4)\nnqtrs(\"2010-01-01\", \"2020-10-01\")\nnqtrs(\"2010-02-01\", \"2020-11-01\")\nnqtrs(\"2010-02-01\", \"2020-10-01\")\nnqtrs(\"2010-01-01\", \"2020-11-01\")\n\n\n\n6.2.11 fcutils::qtrs()\n\n6.2.11.1 Description\nConvert period in quarters to period in months\n\n\n6.2.11.2 Usage\nqtrs(nr_quarters)\n\n\n6.2.11.3 Arguments\n\n\n\nnr_quarters\nnumber of quarters in period (integer)\n\n\n\n\n\n6.2.11.4 Value\nnumber of months in period\n\n\n6.2.11.5 Examples\nqtrs(3)\nlubridate::ymd(\"2020-01-01\") + qtrs(3)\n\n\n\n6.2.12 fcutils::p()\n\n6.2.12.1 Description\nConcatenate dates to obtain period\n\n\n6.2.12.2 Usage\np(dat1 = \"\", dat2 = \"\")\n\n\n6.2.12.3 Arguments\n\n\n\ndat1\ndate of period start (string: see examples)\n\n\ndat2\ndate of period end (string: see examples)\n\n\n\n\n\n6.2.12.4 Value\nstring containing date range\n\n\n6.2.12.5 Examples\np(\"2010-01-01\", \"2020-01-01\")\np(20100101, 20200101)\np(2010.1, 2020.4)\np(,2020.4)\np(\"2010Q1\", \"2020Q4\")\np(2010, 2020) ## for annual period only\n\n\n\n6.2.13 fcutils::pm()\n\n6.2.13.1 Description\nConcatenate dates formatted as yyyyMm or yyyy.m to obtain period\n\n\n6.2.13.2 Usage\npm(dat1 = \"\", dat2 = \"\")\n\n\n6.2.13.3 Arguments\n\n\n\ndat1\ndate of period start (string: yyyyMm or yyyy.m)\n\n\ndat2\ndate of period end (string: yyyyMm or yyyy.m)\n\n\n\n\n\n6.2.13.4 Value\nstring containing date range\n\n\n6.2.13.5 Examples\npm(\"2010M1\", \"2020M4\")\npm(2010.1, 2020.4)\npm(2010.1, )\npm(, 2010.1)\n\n\n\n6.2.14 fcutils::pq()\n\n6.2.14.1 Description\nConcatenate dates formatted as yyyyQq or yyyy.q to obtain period\n\n\n6.2.14.2 Usage\npq(dat1 = \"\", dat2 = \"\")\n\n\n6.2.14.3 Arguments\n\n\n\ndat1\ndate of period start (string: yyyyQq or yyyy.q)\n\n\ndat2\ndate of period end (string: yyyyQq or yyyy.q)\n\n\n\n\n\n6.2.14.4 Value\nstring containing date range\n\n\n6.2.14.5 Examples\npq(\"2010Q1\", \"2020Q4\")\npq(2010.1, 2020.4)\npq(2010.1, )\npq(, 2010.1)\n\n\n\n6.2.15 fcutils::py()\n\n6.2.15.1 Description\nConcatenate dates formatted as yyyy to obtain period\n\n\n6.2.15.2 Usage\npy(dat1 = \"\", dat2 = \"\")\n\n\n6.2.15.3 Arguments\n\n\n\ndat1\nyear of period start (string or numeric: yyyy)\n\n\ndat2\nyear of period end (string or numeric: yyyy)\n\n\n\n\n\n6.2.15.4 Value\nstring containing date range\n\n\n6.2.15.5 Examples\npy(\"2010\", \"2020\")\npy(2010, 2020)\npy(2010, )\npy(, 2010)\n\n\n\n6.2.16 fcutils::to_ymd()\n\n6.2.16.1 Description\nParse strings into dates in yyyy-mm-dd format\n\n\n6.2.16.2 Usage\nto_ymd(x)\n\n\n6.2.16.3 Arguments\n\n\n\nx\nstring (string: yyyymmdd, yyyyqq, yyyy.q, yyyy)\n\n\n\n\n\n6.2.16.4 Value\nformatted dates (yyyy-mm-dd)\n\n\n6.2.16.5 Examples\nto_ymd(c(\"2010.0211\", 202002, 2020.2, \"2020\"))\n\n\n\n6.2.17 fcutils::ymd_to_yQq()\n\n6.2.17.1 Description\nConvert dates from yyyy-mm-dd to yyyyQqq format\n\n\n6.2.17.2 Usage\nymd_to_yQq(x)\n\n\n6.2.17.3 Arguments\n\n\n\nx\ndates (string: yyyy-mm-dd)\n\n\n\n\n\n6.2.17.4 Value\nformatted dates (string: yyyyQqq)\n\n\n6.2.17.5 Examples\nymd_to_yQq(c(\"2010-01-01\", \"2020-10-01\"))\nymd_to_yQq(c(\"2010-01-01\", \"2020-10-01\")) |&gt; lubridate::yq()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#frequency-conversion",
    "href": "fcutils.html#frequency-conversion",
    "title": "6  Utility functions",
    "section": "6.3 Frequency conversion",
    "text": "6.3 Frequency conversion\n\n6.3.1 tsbox::ts_frequency()\n\n6.3.1.1 Description\nChanges the frequency of a time series. By default, incomplete periods of regular series are omitted.\n\n\n6.3.1.2 Usage\nts_frequency(\n  x,\n  to = c(\"year\", \"quarter\", \"month\", \"week\", \"day\", \"hour\", \"min\", \"sec\"),\n  aggregate = \"mean\",\n  na.rm = FALSE\n)\n\n\n6.3.1.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\nto\ndesired frequency, either a character string (\"year\", \"quarter\", \"month\") or an integer (1, 4, 12).\n\n\naggregate\ncharacter string, or function. Either \"mean\", \"sum\", \"first\", or \"last\", or any aggregate function, such as base::mean().\n\n\nna.rm\nlogical, if TRUE, incomplete periods are aggregated as well. For irregular series, incomplete periods are always aggregated.\n\n\n\n\n\n6.3.1.4 Details\nThe tempdisagg package can convert low frequency to high frequency data and has support for ts-boxable objects. See vignette(\"hf-disagg\", package = \"tempdisagg\").\n\n\n6.3.1.5 Value\na ts-boxable time series, with the same class as the input.\n\n\n6.3.1.6 Examples\nts_frequency(cbind(mdeaths, fdeaths), \"year\", \"sum\")\nts_frequency(cbind(mdeaths, fdeaths), \"quarter\", \"last\")\n\nts_frequency(AirPassengers, 4, \"sum\")\n\n## Note that incomplete years are omited by default\nts_frequency(EuStockMarkets, \"year\")\nts_frequency(EuStockMarkets, \"year\", na.rm = TRUE)\n\n\n\n6.3.2 fcutils::disagg()\n\n6.3.2.1 Description\nInterpolate univariate or multivariate time series from low to high frequency\n\n\n6.3.2.2 Usage\ndisagg(x, conv_type = \"mean\", target_freq = \"quarter\", pattern = NULL)\n\n\n6.3.2.3 Arguments\n\n\n\nx\na tx-boxable object at a low frequency (e.g. annual or quarterly)\n\n\nconv_type\nmatch the quarterly value via \"first\", \"last\", \"sum\", \"mean\"\n\n\ntarget_freq\ntarget frequency \"quarter\" or \"month\"\n\n\npattern\na single high-frequency pattern that the interpolation should follow\n\n\n\n\n\n6.3.2.4 Details\nthe time-span of the high-frequency pattern has to match or be larger than the time-span of the low frequency series. NA values are not allowed.\n\n\n6.3.2.5 Value\ninterpolated object of the same type as the input\n\n\n6.3.2.6 Examples\nquarterly_data_example |&gt;\n  disagg(conv_type = \"mean\", target_freq = \"month\")\nquarterly_data_example |&gt;\n  disagg(conv_type = \"mean\", target_freq = \"month\") |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_frequency(to = \"quarter\", aggregate = \"mean\") |&gt;\n  tsbox::ts_wide() ## this matches original data\n## works with a single series too\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  disagg(conv_type = \"mean\", target_freq = \"month\") |&gt;\n  tsbox::ts_plot()\n## using a high-frequency pattern\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_span(\"2005-01-01\", \"2020-01-01\") |&gt;\n  disagg(\n    conv_type = \"mean\", target_freq = \"month\", pattern = monthly_data_example |&gt;\n      tsbox::ts_long() |&gt;\n      tsbox::ts_pick(\"VISNS_HI\")\n  )\n## multiple low-frequency series, same number of high-frequency patterns\npurrr::map2(\n  quarterly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_pick(\"E_NF_HI\", \"ECT_HI\") |&gt;\n    tsbox::ts_span(\"2005-01-01\", \"2020-01-01\") |&gt;\n    tsbox::ts_tslist(),\n  monthly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_tslist(),\n  ~ disagg(.x, conv_type = \"mean\", target_freq = \"month\", pattern = .y)\n)\n\n\n\n6.3.3 fcutils::QtoA()\n\n6.3.3.1 Description\nAggregate from quarterly to annual frequency (superseded by tsbox::ts_frequency())\n\n\n6.3.3.2 Usage\nQtoA(ser_in, aggr = \"mean\")\n\n\n6.3.3.3 Arguments\n\n\n\nser_in\nthe xts series to be converted (freq = q)\n\n\naggr\naggregate via mean (default) or sum\n\n\n\n\n\n6.3.3.4 Value\nconverted xts series (freq = a)\n\n\n6.3.3.5 Examples\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  QtoA() |&gt; ## this matches with below\n  AtoQ() |&gt;\n  QtoA() |&gt; ## this matches with above\n  tsbox::ts_plot()\n\n\n\n6.3.4 fcutils::AtoQ()\n\n6.3.4.1 Description\nLinear interpolation based on AREMOS command reference page 292 (superseded by disagg())\n\n\n6.3.4.2 Usage\nAtoQ(ser_in, aggr = \"mean\")\n\n\n6.3.4.3 Arguments\n\n\n\nser_in\nthe xts series to be interpolated (freq = a)\n\n\naggr\ninterpolation method: aggregate via mean (default) or sum\n\n\n\n\n\n6.3.4.4 Value\ninterpolated xts series (freq = q)\n\n\n6.3.4.5 Examples\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  QtoA() |&gt; ## this matches with below\n  AtoQ() |&gt;\n  QtoA() |&gt; ## this matches with above\n  tsbox::ts_plot()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#growth-rates-and-level-operations",
    "href": "fcutils.html#growth-rates-and-level-operations",
    "title": "6  Utility functions",
    "section": "6.4 Growth rates and level operations",
    "text": "6.4 Growth rates and level operations\n\n6.4.1 tsbox::ts_pc()\n\n6.4.1.1 Description\nts_pcy and ts_diffy calculate the percentage change rate and the difference compared to the previous period, ts_pcy and ts_diffy calculate the percentage change rate compared to the same period of the previous year. ts_pca calculates annualized percentage change rates compared to the previous period.\n\n\n6.4.1.2 Usage\nts_pc(x)\n\nts_diff(x)\n\nts_pca(x)\n\nts_pcy(x)\n\nts_diffy(x)\n\n\n6.4.1.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.4.1.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.4.1.5 Examples\nx &lt;- ts_c(fdeaths, mdeaths)\nts_diff(x)\nts_pc(x)\nts_pca(x)\nts_pcy(x)\nts_diffy(x)\n\n\n\n6.4.2 tsbox::ts_lag()\n\n6.4.2.1 Description\nShift time stamps in ts-boxable time series, either by a number of periods or by a fixed amount of time.\n\n\n6.4.2.2 Usage\nts_lag(x, by = 1)\n\n\n6.4.2.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\nby\ninteger or character, either the number of shifting periods (integer), or an absolute amount of time (character). See details.\n\n\n\n\n\n6.4.2.4 Details\nThe lag order, by, is defined the opposite way as in R base. Thus, -1 is a lead and +1 a lag.\nIf by is integer, the time stamp is shifted by the number of periods. This requires the series to be regular.\nIf by is character, the time stamp is shifted by a specific amount of time. This can be one of one of \"sec\", \"min\", \"hour\", \"day\", \"week\", \"month\", ⁠\"quarter\" or ⁠\"year\", optionally preceded by a (positive or negative) integer and a space, or followed by plural \"s\". This is passed to base::seq.Date(). This does not require the series to be regular.\n\n\n6.4.2.5 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.4.2.6 Examples\nts_plot(AirPassengers, ts_lag(AirPassengers), title = \"The need for glasses\")\n\nts_lag(fdeaths, \"1 month\")\nts_lag(fdeaths, \"1 year\")\nx &lt;- ts_df(fdeaths)\nts_lag(x, \"2 day\")\nts_lag(x, \"2 min\")\nts_lag(x, \"-1 day\")\n\n\n\n6.4.3 tsbox::ts_arithmetic()\n\n6.4.3.1 Description\nArithmetic Operators for ts-boxable objects\n\n\n6.4.3.2 Usage\ne1 %ts+% e2\n\ne1 %ts-% e2\n\ne1 %ts*% e2\n\ne1 %ts/% e2\n\n\n6.4.3.3 Arguments\n\n\n\ne1\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\ne2\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.4.3.4 Value\na ts-boxable time series, with the same class as the left input.\n\n\n6.4.3.5 Examples\nhead(fdeaths - mdeaths)\nhead(fdeaths %ts-% mdeaths)\nhead(ts_df(fdeaths) %ts-% mdeaths)\n\n\n\n6.4.4 tsbox::ts_scale()\n\n6.4.4.1 Description\nSubtract mean (sum(x)/n) and divide by standard deviation (sqrt(sum(x^2)/(n-1))). Based on base::scale().\n\n\n6.4.4.2 Usage\nts_scale(x, center = TRUE, scale = TRUE)\n\n\n6.4.4.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\ncenter\nlogical\n\n\nscale\nlogical\n\n\n\n\n\n6.4.4.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.4.4.5 Examples\nts_plot(ts_scale((ts_c(airmiles, co2, JohnsonJohnson, discoveries))))\nts_plot(ts_scale(ts_c(AirPassengers, DAX = EuStockMarkets[, \"DAX\"])))\n\n\n\n6.4.5 tsbox::ts_trend()\n\n6.4.5.1 Description\nTrend estimation that uses stats::loess().\n\n\n6.4.5.2 Usage\nts_trend(x, ...)\n\n\n6.4.5.3 Arguments\n\n\n\n\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n...\narguments, passed to stats::loess():\n\ndegree degree of Loess smoothing\nspan smoothing parameter, if NULL, an automated search performed (see Details)\n\n\n\n\n\n\n6.4.5.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.4.5.5 References\nCleveland, William S., Eric Grosse, and William M. Shyu. \"Local regression models.\" Statistical models in S. Routledge, 2017. 309-376.\n\n\n6.4.5.6 Examples\nts_plot(\n  `Raw series` = fdeaths,\n  `Loess trend` = ts_trend(fdeaths),\n  title = \"Deaths from Lung Diseases\",\n  subtitle = \"per month\"\n)\n\n\n\n6.4.6 tsbox::ts_bind()\n\n6.4.6.1 Description\nCombine time series to a new, single time series. ts_bind combines time series as they are, ts_chain chains them together, using percentage change rates.\n\n\n6.4.6.2 Usage\nts_bind(...)\n\nts_chain(...)\n\n\n6.4.6.3 Arguments\n\n\n\n...\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.4.6.4 Details\nIn data frame objects, multiple time series are stored in a long data frame. In ts and xts objects, time series are combined horizontally.\n\n\n6.4.6.5 Value\na ts-boxable object of the same class as the input, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries. If series of different classes are combined, the class of the first series is used (if possible).\n\n\n6.4.6.6 See Also\nts_c to collect multiple time series\n\n\n6.4.6.7 Examples\nts_bind(ts_span(mdeaths, end = \"1975-12-01\"), fdeaths)\nts_bind(mdeaths, c(2, 2))\nts_bind(mdeaths, 3, ts_bind(fdeaths, c(99, 2)))\nts_bind(ts_dt(mdeaths), AirPassengers)\n\n## numeric vectors\nts_bind(12, AirPassengers, c(2, 3))\nts_chain(ts_span(mdeaths, end = \"1975-12-01\"), fdeaths)\n\nts_plot(ts_pc(ts_c(\n  comb = ts_chain(ts_span(mdeaths, end = \"1975-12-01\"), fdeaths),\n  fdeaths\n)))\n\n\n\n6.4.7 tsbox::ts_index()\n\n6.4.7.1 Description\nts_index returns an indexed series, with value of 1 at the base date or range. ts_compound builds an index from percentage change rates, starting with 1 and compounding the rates.\n\n\n6.4.7.2 Usage\nts_compound(x, denominator = 100)\n\nts_index(x, base = NULL)\n\n\n6.4.7.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\ndenominator\npositive number. Set equal to 1 if percentage change rate is given a decimal fraction\n\n\nbase\nbase date, character string, Date or POSIXct, at which the index is set to 1. If two dates are provided, the mean in the range is set equal to 1 (see examples).\n\n\n\n\n\n6.4.7.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.4.7.5 Examples\nx &lt;- ts_pc(ts_c(fdeaths, mdeaths))\nts_compound(x)\ny &lt;- ts_df(ts_c(fdeaths, mdeaths))\nts_index(y, \"1974-02-01\")\n\nts_plot(\n  `My Expert Knowledge` = ts_chain(\n    mdeaths,\n    ts_compound(ts_bind(ts_pc(mdeaths), 15, 23, 33))\n  ),\n  `So Far` = mdeaths,\n  title = \"A Very Manual Forecast\"\n)\n\n## mean of 1974 = 1\nts_index(mdeaths, c(\"1974-01-01\", \"1974-12-31\"))\n\n\n\n6.4.8 fcutils::index()\n\n6.4.8.1 Description\nGet indexed series (wrapper around tsbox::ts_index())\n\n\n6.4.8.2 Usage\nindex(x, base_per = as.character(Sys.Date()), base_value = 100)\n\n\n6.4.8.3 Arguments\n\n\n\nx\nts-boxable object to be indexed\n\n\nbase_per\nbase date when the index is set to base_value (see examples). If two dates are provided, the mean in the range is set equal to base_value.\n\n\nbase_value\nnumeric value of the index at base_per (e.g. 1 or 100)\n\n\n\n\n\n6.4.8.4 Value\nindexed object of the same type as the input\n\n\n6.4.8.5 Examples\nquarterly_data_example |&gt;\n  index(2010.1)\nquarterly_data_example |&gt;\n  index(c(2010.1, 2010.4))\nquarterly_data_example |&gt;\n  index(c(\"2010-01-01\", \"2010-12-31\"), 1)\n\n\n\n6.4.9 fcutils::ma()\n\n6.4.9.1 Description\nBackward looking moving average\n\n\n6.4.9.2 Usage\nma(x, order)\n\n\n6.4.9.3 Arguments\n\n\n\nx\nts-boxable object\n\n\norder\nnumeric order (window length) of moving average, includes contemporaneous observation\n\n\n\n\n\n6.4.9.4 Value\nobject of the same type as the input containing moving average\n\n\n6.4.9.5 Examples\nquarterly_data_example |&gt;\n  ma(4) |&gt;\n  head()\n\n\n\n6.4.10 fcutils::yoy_to_lev()\n\n6.4.10.1 Description\nExtend a series using year over year growth\n\n\n6.4.10.2 Usage\nyoy_to_lev(yoy_gr, hist_lev, smooth_span = 0)\n\n\n6.4.10.3 Arguments\n\n\n\nyoy_gr\nts-boxable object containing year over year growth rates\n\n\nhist_lev\nts-boxable object containing the history in levels for forecast and at least one year of history (in percent)\n\n\nsmooth_span\nextent of smoothing between 0-1 (default: 0, no smoothing)\n\n\n\n\n\n6.4.10.4 Details\nThis function only works for univariate time series and requires that the growth rates are available for at least the last year of history. Year-over-year growth rates propagate the fluctuations of the base period into the extension period. This can be mitigated by smoothing the extension.\n\n\n6.4.10.5 Value\nobject of the same type as hist_lev extended with year over year growth\n\n\n6.4.10.6 Examples\ngr &lt;- quarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  dplyr::filter(id == \"E_NF_HI\") |&gt;\n  tsbox::ts_pcy()\nlev &lt;- quarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  dplyr::filter(id == \"ECT_HI\")\nres1 &lt;- yoy_to_lev(gr, lev |&gt; dplyr::filter(time &lt;= \"2010-01-01\"))\nres2 &lt;- yoy_to_lev(gr, lev |&gt; dplyr::filter(time &lt;= \"2010-01-01\"), 1/8)\ntsbox::ts_plot(lev, res1, res2)\n\n\n\n6.4.11 fcutils::mtd_cum()\n\n6.4.11.1 Description\nMonth to date sum or average\n\n\n6.4.11.2 Usage\nmtd_cum(x, avg = TRUE)\n\n\n6.4.11.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\navg\nif TRUE (default), return month to date average, if FALSE, return month to date sum\n\n\n\n\n\n6.4.11.4 Value\nobject of the same type as the input containing year to date sum or average\n\n\n6.4.11.5 Examples\ndaily_data_example |&gt;\n  mtd_cum()\ntest &lt;- daily_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"VAPNS_HI\") |&gt;\n  mtd_cum()\ntsbox::`%ts/%`(test, tsbox::ts_lag(test, \"6 months\")) |&gt; tail()\n\n\n\n6.4.12 fcutils::mtd_gr()\n\n6.4.12.1 Description\nMonth to date growth rate\n\n\n6.4.12.2 Usage\nmtd_gr(x)\n\n\n6.4.12.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\n\n\n\n6.4.12.4 Value\nobject of the same type as the input containing month to date growth rate\n\n\n6.4.12.5 Examples\ndaily_data_example |&gt;\n  mtd_gr() |&gt;\n  tail()\n\n\n\n6.4.13 fcutils::ytd_cum()\n\n6.4.13.1 Description\nYear to date sum or average\n\n\n6.4.13.2 Usage\nytd_cum(x, avg = TRUE)\n\n\n6.4.13.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\navg\nif TRUE (default), return year to date average, if FALSE, return year to date sum\n\n\n\n\n\n6.4.13.4 Value\nobject of the same type as the input containing year to date sum or average\n\n\n6.4.13.5 Examples\nmonthly_data_example |&gt;\n  ytd_cum()\nmonthly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"VISNS_HI\") |&gt;\n  tsbox::ts_xts() |&gt;\n  ytd_cum(avg = FALSE) |&gt;\n  tsbox::ts_plot()\n\n\n\n6.4.14 fcutils::ytd_gr()\n\n6.4.14.1 Description\nYear to date growth rate\n\n\n6.4.14.2 Usage\nytd_gr(x)\n\n\n6.4.14.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\n\n\n\n6.4.14.4 Value\nobject of the same type as the input containing year to date growth rate\n\n\n6.4.14.5 Examples\nmonthly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"VISNS_HI\") |&gt;\n  tsbox::ts_xts() |&gt;\n  ytd_gr() |&gt;\n  tail()\n\n\n\n6.4.15 fcutils::ptd_cum()\n\n6.4.15.1 Description\nPeriod to date sum or average\n\n\n6.4.15.2 Usage\nptd_cum(x, per = \"year\", avg = TRUE)\n\n\n6.4.15.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\nper\nunit of time supplied to floor_date() (for ytd per = \"year\" (default), for mtd per = \"month\")\n\n\navg\nif TRUE (default), retorn period to date average, if FALSE, return period to date sum\n\n\n\n\n\n6.4.15.4 Value\nobject of the same type as the input containing period to date sum or average\n\n\n6.4.15.5 Examples\ndaily_data_example |&gt;\n  ptd_cum(\"week\")\ntest &lt;- daily_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"VAPNS_HI\") |&gt;\n  ptd_cum(\"week\")\ntsbox::`%ts/%`(test, tsbox::ts_lag(test, \"4 weeks\")) |&gt;\n  tsbox::`%ts-%`(1) |&gt;\n  tsbox::`%ts*%`(100) |&gt;\n  tail()\n\n\n\n6.4.16 fcutils::ptd_gr()\n\n6.4.16.1 Description\nPeriod to date growth rate\n\n\n6.4.16.2 Usage\nptd_gr(x, per = \"year\", lag_length = \"1 year\")\n\n\n6.4.16.3 Arguments\n\n\n\nx\na ts-boxable object\n\n\nper\nunit of time supplied to floor_date() (for ytd per = \"year\" (default), for mtd per = \"month\")\n\n\nlag_length\nperiod over which growth is calculated (e.g. \"1 year\" (default), \"3 years\", etc. See ?ts_lag() for options)\n\n\n\n\n\n6.4.16.4 Value\nobject of the same type as the input containing period to date growth rate\n\n\n6.4.16.5 Examples\nmonthly_data_example |&gt;\n  ptd_gr() |&gt;\n  tail()\nmonthly_data_example |&gt;\n  dplyr::select(time, \"VAPNS_HI\") |&gt;\n  ptd_gr(per = \"month\", lag_length = \"3 years\") |&gt;\n  tail()\n## don't use lag_length = \"1 year\" with weekly data\ndaily_data_example |&gt;\n  ptd_gr(\"week\")\n## lag_length = \"52 weeks\" instead\ndaily_data_example |&gt;\n  ptd_gr(\"week\", \"52 weeks\")\n## and use lag_length = \"364 days\" with daily data\ndaily_data_example |&gt;\n  ptd_gr(\"day\", \"364 days\")\ndaily_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"VAPNS_HI\") |&gt;\n  ptd_gr(\"week\", \"4 weeks\") %&gt;%\n  tail()\n\n\n\n6.4.17 fcutils::pca_to_pc()\n\n6.4.17.1 Description\nConvert annualized growth to quarterly growth\n\n\n6.4.17.2 Usage\npca_to_pc(x, freq = 4)\n\n\n6.4.17.3 Arguments\n\n\n\nx\nts-boxable object containing annualized growth (in percent)\n\n\nfreq\nnumeric frequency of the time series e.g. 4 for quarterly\n\n\n\n\n\n6.4.17.4 Value\nobject of the same type as the input containing quarterly growth (in percent)\n\n\n6.4.17.5 Examples\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pca() |&gt;\n  pca_to_pc() |&gt;\n  tail()\ntsbox::ts_c(\n  quarterly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_pca() |&gt;\n    pca_to_pc(),\n  quarterly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_pc()\n) |&gt;\n  dplyr::arrange(id, time) |&gt;\n  tsbox::ts_wide()\n\n\n\n6.4.18 fcutils::pc_to_pca()\n\n6.4.18.1 Description\nConvert quarterly growth to annualized growth\n\n\n6.4.18.2 Usage\npc_to_pca(x, freq = 4)\n\n\n6.4.18.3 Arguments\n\n\n\nx\nts-boxable object containing quarterly growth (in percent)\n\n\nfreq\nnumeric frequency of the time series e.g. 4 for quarterly\n\n\n\n\n\n6.4.18.4 Value\nobject of the same type as the input containing annualized growth (in percent)\n\n\n6.4.18.5 Examples\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pc() |&gt;\n  pc_to_pca() |&gt;\n  tail()\ntsbox::ts_c(\n  quarterly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_pc() |&gt;\n    pc_to_pca(),\n  quarterly_data_example |&gt;\n    tsbox::ts_long() |&gt;\n    tsbox::ts_pca()\n) |&gt;\n  dplyr::arrange(id, time) |&gt;\n  tsbox::ts_wide()\n\n\n\n6.4.19 fcutils::cagr()\n\n6.4.19.1 Description\nCalculate compund annual growth\n\n\n6.4.19.2 Usage\ncagr(x)\n\n\n6.4.19.3 Arguments\n\n\n\nx\nts-boxable object for which growth is calculated between first and last period\n\n\n\n\n\n6.4.19.4 Value\na tibble with a single row containing the compound annual growth between the first and last period of x (in percent)\n\n\n6.4.19.5 Examples\nquarterly_data_example |&gt;\n  cagr()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  cagr()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  tsbox::ts_span(\"2000-01-01\", \"2020-01-01\") |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  cagr()\n\n\n\n6.4.20 fcutils::pcmp()\n\n6.4.20.1 Description\nCalculate multi-period average growth\n\n\n6.4.20.2 Usage\npcmp(x, lag = 4, comp_freq = 1)\n\n\n6.4.20.3 Arguments\n\n\n\nx\nts-boxable object for which growth is calculated (in levels)\n\n\nlag\nnumber of periods over which growth is calculated\n\n\ncomp_freq\ncompounding frequency (1 if period by period, 4 if annualized for quarterly data, etc.)\n\n\n\n\n\n6.4.20.4 Value\nobject of the same type as the input ontaining the average growth of x (in percent)\n\n\n6.4.20.5 Examples\nquarterly_data_example |&gt;\n  pcmp(20) |&gt;\n  tail()\nquarterly_data_example |&gt;\n  pcmp(4, 4) |&gt;\n  tail()\nquarterly_data_example |&gt;\n  pcmp(1, 4) |&gt;\n  tail()\n\n\n\n6.4.21 fcutils::%+=%()\n\n6.4.21.1 Description\nWarning: Typing x %+=% y/2 returns x &lt;- (x + y)/2. Adding parentheses, i.e. x %+=% (y/2) solves the problem.\n\n\n6.4.21.2 Usage\ne1 %+=% e2\n\n\n6.4.21.3 Arguments\n\n\n\ne1\nfirst addend (and returned sum)\n\n\ne2\nsecond addend\n\n\n\n\n\n6.4.21.4 Value\nsum of the two addends replacing the values in the first addend\n\n\n6.4.21.5 Examples\nadd_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] &lt;- add_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] +\n  c(0.01, -0.04, rep(-0.025, 4))\nadd_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] %+=% c(0.01, -0.04, rep(-0.025, 4)) ## easier on the eye",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#sec-type",
    "href": "fcutils.html#sec-type",
    "title": "6  Utility functions",
    "section": "6.5 Data type conversion",
    "text": "6.5 Data type conversion\n\n6.5.1 tsbox::ts_ts()\n\n6.5.1.1 Description\ntsbox is built around a set of converters, which convert time series stored as ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries to each other.\n\n\n6.5.1.2 Usage\nts_data.frame(x)\n\nts_df(x)\n\nts_data.table(x)\n\nts_dt(x)\n\nts_tbl(x)\n\nts_tibbletime(x)\n\nts_timeSeries(x)\n\nts_tis(x)\n\nts_ts(x)\n\nts_irts(x)\n\nts_tsibble(x)\n\nts_tslist(x)\n\nts_xts(x)\n\nts_zoo(x)\n\nts_zooreg(x)\n\n\n6.5.1.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.5.1.4 Details\nIn data frames, multiple time series will be stored in a 'long' format. tsbox detects a value, a time and zero to several id columns. Column detection is done in the following order:\n\nStarting on the right, the first first numeric or integer column is used as value column.\nUsing the remaining columns, and starting on the right again, the first Date, POSIXct, numeric or character column is used as time column. character strings are parsed by anytime::anytime(). The time stamp, time, indicates the beginning of a period.\nAll remaining columns are id columns. Each unique combination of id columns points to a time series.\n\nAlternatively, the time column and the value column to be explicitly named as time and value. If explicit names are used, the column order will be ignored.\nWhenever possible, tsbox relies on heuristic time conversion. When a monthly \"ts\" time series, e.g., AirPassengers, is converted to a data frame, each time stamp (of class \"Date\") is the first day of the month. In most circumstances, this reflects the actual meaning of the data stored in a \"ts\" object. Technically, of course, this is not correct: \"ts\" objects divide time in period of equal length, while in reality, February is shorter than January. Heuristic conversion is done for frequencies of 0.1 (decades), 1 (years), 4 (quarters) and 12 (month).\nFor other frequencies, e.g. 260, of EuStockMarkets, tsbox uses exact time conversion. The year is divided into 260 equally long units, and time stamp of a period will be a point in time (of class \"POSIXct\").\n\n\n6.5.1.5 Value\nts-boxable time series of the desired class, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.5.1.6 Examples\nx.ts &lt;- ts_c(mdeaths, fdeaths)\nx.ts\nts_df(x.ts)\n\nsuppressMessages(library(dplyr))\nts_tbl(x.ts)\n\nsuppressMessages(library(data.table))\nts_dt(x.ts)\n\nsuppressMessages(library(xts))\nts_xts(x.ts)\n\n## heuristic time conversion\n## 1 month: approx. 1/12 year\nts_df(AirPassengers)\n\n## exact time conversion\n## 1 trading day: exactly 1/260 year\nts_df(EuStockMarkets)\n\n## multiple ids\na &lt;- ts_df(ts_c(fdeaths, mdeaths))\na$type &lt;- \"level\"\nb &lt;- ts_pc(a)\nb$type &lt;- \"pc\"\nmulti.id.df &lt;- rbind(a, b)\n\nts_ts(multi.id.df)\nts_plot(multi.id.df)\n\n\n\n6.5.2 tsbox::ts_long()\n\n6.5.2.1 Description\nFunctions to reshape multiple time series from 'wide' to 'long' and vice versa. Note that long format data frames are ts-boxable objects, where wide format data frames are not. ts_long automatically identifies a time column, and uses columns on the left as id columns.\n\n\n6.5.2.2 Usage\nts_long(x)\n\nts_wide(x)\n\n\n6.5.2.3 Arguments\n\n\n\nx\na ts-boxable time series, or a wide data.frame, data.table, or tibble.\n\n\n\n\n\n6.5.2.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.5.2.5 Examples\nx &lt;- ts_df(ts_c(mdeaths, fdeaths))\ndf.wide &lt;- ts_wide(x)\ndf.wide\nts_long(df.wide)\n\n\n\n6.5.3 fcutils::conv_long()\n\n6.5.3.1 Description\nConvert \"ts-boxable\" objects into long format\n\n\n6.5.3.2 Usage\nconv_long(x, ser_info = FALSE)\n\n\n6.5.3.3 Arguments\n\n\n\nx\na \"tx-boxable\" object to be converted\n\n\nser_info\nshould additional details be returned (TRUE) or only the long format of x (default: FALSE)\n\n\n\n\n\n6.5.3.4 Details\nThis function converts wide data frames and other ts-boxable objects to the long format (wide data frames are not ts-boxable). In addition, it ensures that objects containing a single time series have an id column.\n\n\n6.5.3.5 Value\nreturns a ts-boxable object in long format with id, time and value columns. if ser_info = TRUE, also returns the following attributes: was_wide is TRUE if x is a wide data frame, FALSE otherwise, and ser_names are the names of the series in x.\n\n\n6.5.3.6 Examples\nquarterly_data_example |&gt;\n  conv_long()\nquarterly_data_example |&gt;\n  conv_long() |&gt;\n  tsbox::ts_tslist() |&gt;\n  conv_long()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  conv_long(ser_info = TRUE)\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  tsbox::ts_xts() |&gt;\n  conv_long()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() |&gt;\n  tsbox::ts_pick(\"E_NF_HI\") |&gt;\n  conv_long()\n\n\n\n6.5.4 fcutils::is_wide()\n\n6.5.4.1 Description\nCheck if a data frame is in wide format\n\n\n6.5.4.2 Usage\nis_wide(x)\n\n\n6.5.4.3 Arguments\n\n\n\nx\ntibble or data frame\n\n\n\n\n\n6.5.4.4 Value\nreturns TRUE for wide format data frame (time and value columns), FALSE otherwise\n\n\n6.5.4.5 Examples\nmonthly_data_example |&gt; is_wide()\nmonthly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  is_wide()\ndat_in &lt;- monthly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_tslist()\nwide_df &lt;- is_wide(dat_in)\nx_mod &lt;- if (wide_df) tsbox::ts_long(dat_in) else tsbox::ts_tbl(dat_in)\nans &lt;- if (wide_df) tsbox::ts_wide(x_mod) else tsbox::copy_class(x_mod, dat_in)\n\n\n\n6.5.5 fcutils::set_attr_tslist()\n\n6.5.5.1 Description\nSet class attribute to tslist\n\n\n6.5.5.2 Usage\nset_attr_tslist(x)\n\n\n6.5.5.3 Arguments\n\n\n\nx\nlist, typically a result of purrr::map() applied to a tslist\n\n\n\n\n\n6.5.5.4 Details\nA purrr::map() function applied to a tslist (obtained by tsbox::ts_tslist()) drops the tslist class attribute. This function resets that attribute.\n\n\n6.5.5.5 Value\nlist with class attributes set to list and tslist\n\n\n6.5.5.6 Examples\nmonthly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_tslist() |&gt;\n  purrr::map(~ .x / 1000) |&gt;\n  set_attr_tslist() |&gt;\n  tsbox::ts_tbl() |&gt;\n  tsbox::ts_wide()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#sec-field",
    "href": "fcutils.html#sec-field",
    "title": "6  Utility functions",
    "section": "6.6 Data field operations",
    "text": "6.6 Data field operations\n\n6.6.1 tsbox::ts_c()\n\n6.6.1.1 Description\nCollect time series as multiple time series.\n\n\n6.6.1.2 Usage\nts_c(...)\n\n\n6.6.1.3 Arguments\n\n\n\n...\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.6.1.4 Details\nIn data frame objects, multiple time series are stored in a long data frame. In ts and xts objects, time series are combined horizontally.\n\n\n6.6.1.5 Value\na ts-boxable object of the same class as the input, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries. If series of different classes are combined, the class of the first series is used (if possible).\n\n\n6.6.1.6 See Also\nts_bind, to bind multiple time series to a single series.\n\n\n6.6.1.7 Examples\nts_c(mdeaths, fdeaths)\n\nts_c(ts_df(EuStockMarkets), AirPassengers)\n\n## labeling\nx1 &lt;- ts_c(\n  `International Airline Passengers` = ts_xts(AirPassengers),\n  `Deaths from Lung Diseases` = ldeaths\n)\nhead(x1)\n\n\n\n6.6.2 tsbox::ts_default()\n\n6.6.2.1 Description\nIn data frame objects (data.frame, tibble, data.table), tsbox automatically detects the time and the value column. This function changes the column names to the defaults (time, value), so that auto-detection can be avoided in future operations.\n\n\n6.6.2.2 Usage\nts_default(x)\n\n\n6.6.2.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n\n\n\n6.6.2.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.6.2.5 Examples\ndf &lt;- ts_df(ts_c(mdeaths, fdeaths))\n## non-default colnames\ncolnames(df) &lt;- c(\"id\", \"date\", \"count\")\n## switch back to default colnames\nts_default(df)\n\n\n\n6.6.3 tsbox::ts_pick()\n\n6.6.3.1 Description\nPick (and optionally rename) series from multiple time series.\n\n\n6.6.3.2 Usage\nts_pick(x, ...)\n\n\n6.6.3.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n...\ncharacter string(s), names of the series to be picked, or integer, with positions. If arguments are named, the series will be renamed.\n\n\n\n\n\n6.6.3.4 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.6.3.5 Examples\n## Interactive use\n\nts_plot(ts_pick(\n  EuStockMarkets,\n  `My Dax` = \"DAX\",\n  `My Smi` = \"SMI\"\n))\nts_pick(EuStockMarkets, c(1, 2))\nts_pick(EuStockMarkets, `My Dax` = \"DAX\", `My Smi` = \"SMI\")\n\n## Programming use\nto.be.picked.and.renamed &lt;- c(`My Dax` = \"DAX\", `My Smi` = \"SMI\")\nts_pick(EuStockMarkets, to.be.picked.and.renamed)\n\n\n\n6.6.4 fcutils::get_var()\n\n6.6.4.1 Description\nConstruct a series name from variable components and retrieve the series\n\n\n6.6.4.2 Usage\nget_var(ser_in, env = parent.frame())\n\n\n6.6.4.3 Arguments\n\n\n\nser_in\na variable name (character string with substituted expressions)\n\n\nenv\nenvironment where the expression should be evaluated\n\n\n\n\n\n6.6.4.4 Value\nvariable\n\n\n6.6.4.5 Examples\nser_i &lt;- \"_NF\"\ncnty_i &lt;- \"HI\"\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_xts() %$% get_var(\"E{ser_i}_{cnty_i}\")\n\n\n\n6.6.5 fcutils::rename_udaman()\n\n6.6.5.1 Description\nFormat series names to udaman format (mnemonic@loc.freq)\n\n\n6.6.5.2 Usage\nrename_udaman(ser_in, freq = NULL)\n\n\n6.6.5.3 Arguments\n\n\n\nser_in\nseries names (character \"mnemonic_loc\", \"mnemonic_AT_loc_freq\", \"mnemonic__loc_freq\", mnemonic@loc.freq\")\n\n\nfreq\nfrequency of the series, required if not contained in the series name (character \"D\", \"W\", \"M\", \"Q\", \"S\", \"A\")\n\n\n\n\n\n6.6.5.4 Value\nseries names following udaman convention \"mnemonic@loc.freq\"\n\n\n6.6.5.5 Examples\nrename_udaman(c(\"E_NF_HI\", \"ECT_HI\", \"E_TU_HAW\"), freq = \"M\")\nrename_udaman(c(\"E_NF__HI_M\", \"ECT__HI_M\", \"VAP__HAW_W\"))\nrename_udaman(c(\"E_NF_AT_HI_M\", \"ECT_AT_HI_M\", \"VAP_AT_HAW_W\"))\nrename_udaman(c(\"E_NF@HI.M\", \"ECT@HI.M\", \"VAP@HAW.W\"))\nrename_udaman(c(\"SH_US@HI.M\", \"SH_JP__HON_M\"))\nquarterly_data_example |&gt; dplyr::rename_with(~ rename_udaman(., freq = \"M\"), .cols = -1)\nquarterly_data_example |&gt; dplyr::rename_with(rename_udaman, freq = \"M\", .cols = !time)\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  dplyr::mutate(id = rename_udaman(id, freq = \"M\")) |&gt;\n  tsbox::ts_xts()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#sec-plots",
    "href": "fcutils.html#sec-plots",
    "title": "6  Utility functions",
    "section": "6.7 Plots",
    "text": "6.7 Plots\n\n6.7.1 tsbox::ts_ggplot()\n\n6.7.1.1 Description\nts_ggplot() has the same syntax and produces a similar plot as ts_plot(), but uses the ggplot2 graphic system, and can be customized. With theme_tsbox() and scale_color_tsbox(), the output of ts_ggplot has a similar look and feel.\n\n\n6.7.1.2 Usage\nts_ggplot(..., title, subtitle, ylab = \"\")\n\ntheme_tsbox(base_family = getOption(\"ts_font\", \"\"), base_size = 12)\n\ncolors_tsbox()\n\nscale_color_tsbox(...)\n\nscale_fill_tsbox(...)\n\n\n6.7.1.3 Arguments\n\n\n\n...\nts-boxable time series, objects of class ts, xts, data.frame, data.table, or tibble. For scale_ functions, arguments passed to subfunctions.\n\n\ntitle\ntitle (optional)\n\n\nsubtitle\nsubtitle (optional)\n\n\nylab\nylab (optional)\n\n\nbase_family\nbase font family (can also be set via options)\n\n\nbase_size\nbase font size\n\n\n\n\n\n6.7.1.4 Details\nBoth ts_plot() and ts_ggplot() combine multiple ID dimensions into a single dimension. To plot multiple dimensions in different shapes, facets, etc., use standard ggplot (see examples).\n\n\n6.7.1.5 See Also\nts_plot(), for a simpler and faster plotting function. ts_dygraphs(), for interactive time series plots.\n\n\n6.7.1.6 Examples\n## using the ggplot2 graphic system\np &lt;- ts_ggplot(total = ldeaths, female = fdeaths, male = mdeaths)\np\n\n## with themes for the look and feel of ts_plot()\np + theme_tsbox() + scale_color_tsbox()\n\n## also use themes with standard ggplot\nsuppressMessages(library(ggplot2))\ndf &lt;- ts_df(ts_c(total = ldeaths, female = fdeaths, male = mdeaths))\nggplot(df, aes(x = time, y = value)) +\n  facet_wrap(\"id\") +\n  geom_line() +\n  theme_tsbox() +\n  scale_color_tsbox()\n\n\n### tsbox::ts_ggplot()\nlibrary(dataseries)\ndta &lt;- ds(c(\"GDP.PBRTT.A.R\", \"CCI.CCIIR\"), \"xts\")\nts_ggplot(ts_scale(ts_span(\n  ts_c(\n    `GDP Growth` = ts_pc(dta[, \"GDP.PBRTT.A.R\"]),\n    `Consumer Sentiment Index` = dta[, \"CCI.CCIIR\"]\n  ),\n  start = \"1995-01-01\"\n))) +\n  ggplot2::ggtitle(\"GDP and Consumer Sentiment\", subtitle = \"normalized\") +\n  theme_tsbox() +\n  scale_color_tsbox()\n\n### tsbox::ts_ggplot()\n\n\n\n6.7.2 tsbox::ts_plot()\n\n6.7.2.1 Description\nts_plot() is a fast and simple plotting function for ts-boxable time series, with limited customizability. For more theme options, use ts_ggplot().\n\n\n6.7.2.2 Usage\nts_plot(..., title, subtitle, ylab = \"\", family = getOption(\"ts_font\", \"sans\"))\n\n\n6.7.2.3 Arguments\n\n\n\n...\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\ntitle\ntitle (optional)\n\n\nsubtitle\nsubtitle (optional)\n\n\nylab\nylab (optional)\n\n\nfamily\nfont family (optional, can also be set via options)\n\n\n\n\n\n6.7.2.4 Details\nBoth ts_plot() and ts_ggplot() combine multiple ID dimensions into a single dimension. To plot multiple dimensions in different shapes, facets, etc., use standard ggplot.\nLimited customizability of ts_plot is available via options. See examples.\n\n\n6.7.2.5 See Also\nts_ggplot(), for a plotting function based on ggplot2. ts_dygraphs(), for interactive time series plots. ts_save() to save a plot to the file system.\n\n\n6.7.2.6 Examples\nts_plot(\n  AirPassengers,\n  title = \"Airline passengers\",\n  subtitle = \"The classic Box & Jenkins airline data\"\n)\n\n## naming arguments\nts_plot(total = ldeaths, female = fdeaths, male = mdeaths)\n\n## using different ts-boxable objects\nts_plot(ts_scale(ts_c(\n  ts_xts(airmiles),\n  ts_tbl(co2),\n  JohnsonJohnson,\n  ts_df(discoveries)\n)))\n\n## customize ts_plot\nop &lt;- options(\n  tsbox.lwd = 3,\n  tsbox.col = c(\"gray51\", \"gray11\"),\n  tsbox.lty = \"dashed\"\n)\nts_plot(\n  \"Female\" = fdeaths,\n  \"Male\" = mdeaths\n)\noptions(op) ## restore defaults\n\n\n\n6.7.3 tsbox::ts_save()\n\n6.7.3.1 Description\nSave Previous Plot\n\n\n6.7.3.2 Usage\nts_save(\n  filename = tempfile(fileext = \".pdf\"),\n  width = 10,\n  height = 5,\n  device = NULL,\n  open = TRUE\n)\n\n\n6.7.3.3 Arguments\n\n\n\nfilename\nfilename\n\n\nwidth\nwidth\n\n\nheight\nheight\n\n\ndevice\ndevice\n\n\nopen\nlogical, should the saved plot be opened?\n\n\n\n\n\n6.7.3.4 Value\ninvisible TRUE, if successful\n\n\n6.7.3.5 Examples\nts_plot(AirPassengers)\ntf &lt;- tempfile(fileext = \".pdf\")\nts_save(tf)\nunlink(tf)\n\n\n\n6.7.4 fcutils::plot_1()\n\n6.7.4.1 Description\nInteractive plot with level and growth rate\n\n\n6.7.4.2 Usage\nplot_1(\n  x,\n  rng_start = as.character(Sys.Date() - lubridate::years(10)),\n  rng_end = as.character(Sys.Date() + lubridate::years(2)),\n  height = 300,\n  width = 900,\n  yoy_gr = TRUE,\n  gr_1 = TRUE\n)\n\n\n6.7.4.3 Arguments\n\n\n\nx\nts-boxable object to plot (e.g. time series of history, oldsol, sol)\n\n\nrng_start\nstart of zoom range (\"YYYY-MM-DD\")\n\n\nrng_end\nend of the zoom range (\"YYYY-MM-DD\")\n\n\nheight\nheight of a single panel (px)\n\n\nwidth\nwidth of a single panel (px)\n\n\nyoy_gr\nyear-over-year (default) or annualized growth\n\n\ngr_1\nonly show growth for the first series (default)\n\n\n\n\n\n6.7.4.4 Value\na dygraph plot\n\n\n6.7.4.5 Examples\nmonthly_data_example |&gt;\n  plot_1()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_TU_HI\", \"ECT_HI\", \"EMN_HI\") |&gt;\n  plot_1()\n\n\n\n6.7.5 fcutils::plot_2ax()\n\n6.7.5.1 Description\nInteractive lineplot with two axes\n\n\n6.7.5.2 Usage\nplot_2ax(\n  x,\n  rng_start = as.character(Sys.Date() - lubridate::years(10)),\n  rng_end = as.character(Sys.Date() + lubridate::years(2)),\n  height = 300,\n  width = 900\n)\n\n\n6.7.5.3 Arguments\n\n\n\nx\nts-boxable object to plot (e.g. time series of history, oldsol, sol)\n\n\nrng_start\nstart of zoom range (\"YYYY-MM-DD\")\n\n\nrng_end\nend of the zoom range (\"YYYY-MM-DD\")\n\n\nheight\nheight of a single panel (px)\n\n\nwidth\nwidth of a single panel (px)\n\n\n\n\n\n6.7.5.4 Value\na dygraph plot\n\n\n6.7.5.5 Examples\nmonthly_data_example |&gt;\n  plot_2ax()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_TU_HI\", \"ECT_HI\", \"EMN_HI\") |&gt;\n  plot_2ax()\n\n\n\n6.7.6 fcutils::plot_comp_2()\n\n6.7.6.1 Description\nTwo-panel plot of levels and growth rates\n\n\n6.7.6.2 Usage\nplot_comp_2(\n  x,\n  rng_start = as.character(Sys.Date() - lubridate::years(10)),\n  rng_end = as.character(Sys.Date() + lubridate::years(2)),\n  height = 300,\n  width = 900,\n  yoy_gr = TRUE,\n  gr_bar = FALSE\n)\n\n\n6.7.6.3 Arguments\n\n\n\nx\nts-boxable object to plot\n\n\nrng_start\nstart of the zoom range (\"YYYY-MM-DD\")\n\n\nrng_end\nend of the zoom range (\"YYYY-MM-DD\")\n\n\nheight\nheight of a single panel (px)\n\n\nwidth\nwidth of a single panel (px)\n\n\nyoy_gr\nyear-over-year (default) or annualized growth\n\n\ngr_bar\nshow bars or line (default) for the growth series\n\n\n\n\n\n6.7.6.4 Value\na list with two dygraph plots (level, growth)\n\n\n6.7.6.5 Examples\nmonthly_data_example |&gt;\n  plot_comp_2()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_TU_HI\", \"ECT_HI\", \"EMN_HI\") |&gt;\n  plot_comp_2()\n\n\n\n6.7.7 fcutils::plot_comp_3()\n\n6.7.7.1 Description\nThree-panel plot of levels, index, and growth rates\n\n\n6.7.7.2 Usage\nplot_comp_3(\n  x,\n  base_date = as.character(Sys.Date() - lubridate::years(10)),\n  rng_start = as.character(Sys.Date() - lubridate::years(10)),\n  rng_end = as.character(Sys.Date() + lubridate::years(2)),\n  height = 300,\n  width = 900,\n  yoy_gr = TRUE,\n  gr_bar = FALSE\n)\n\n\n6.7.7.3 Arguments\n\n\n\nx\nts-boxable object to plot\n\n\nbase_date\nbase period for the indexed series (\"YYYY-MM-DD\")\n\n\nrng_start\nstart of the zoom range (\"YYYY-MM-DD\")\n\n\nrng_end\nend of the zoom range (\"YYYY-MM-DD\")\n\n\nheight\nheight of a single panel (px)\n\n\nwidth\nwidth of a single panel (px)\n\n\nyoy_gr\nyear-over-year (default) or annualized growth\n\n\ngr_bar\nshow bars or line (default) for the growth series\n\n\n\n\n\n6.7.7.4 Value\na list with three dygraph plots (level, index, growth)\n\n\n6.7.7.5 Examples\nmonthly_data_example |&gt;\n  plot_comp_3()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_TU_HI\", \"ECT_HI\", \"EMN_HI\") |&gt;\n  plot_comp_3()\n\n\n\n6.7.8 fcutils::plot_fc()\n\n6.7.8.1 Description\nInteractive plot with level and growth rate for forecast series\n\n\n6.7.8.2 Usage\nplot_fc(\n  x,\n  rng_start = as.character(Sys.Date() - lubridate::years(10)),\n  rng_end = as.character(Sys.Date() + lubridate::years(2)),\n  add_table = TRUE,\n  table_start = rng_start,\n  table_end = rng_end,\n  height = 300,\n  width = 900,\n  yoy_gr = TRUE\n)\n\n\n6.7.8.3 Arguments\n\n\n\nx\nts-boxable object to plot (min 1, max 3 time series) (e.g. current fcst, old fcst, history)\n\n\nrng_start\nstart of zoom range (\"YYYY-MM-DD\")\n\n\nrng_end\nend of the zoom range (\"YYYY-MM-DD\")\n\n\nadd_table\nshould a data table be appended to the plot? (default = TRUE)\n\n\ntable_start\nstart of table range (\"YYYY-MM-DD\") (all data = NULL, default = rng_start)\n\n\ntable_end\nend of table range (\"YYYY-MM-DD\") (all data = NULL, default = rng_end)\n\n\nheight\nheight of a single panel (px)\n\n\nwidth\nwidth of a single panel (px)\n\n\nyoy_gr\nyear-over-year (default) or annualized growth\n\n\n\n\n\n6.7.8.4 Value\na dygraph plot\n\n\n6.7.8.5 Examples\nmonthly_data_example |&gt;\n  plot_fc()\nquarterly_data_example |&gt;\n  tsbox::ts_long() |&gt;\n  tsbox::ts_pick(\"E_TU_HI\", \"ECT_HI\", \"EMN_HI\") |&gt;\n  plot_fc()\n\n\n\n6.7.9 fcutils::save_plot_list()\n\n6.7.9.1 Description\nSave a list of interactive plots to html\n\n\n6.7.9.2 Usage\nsave_plot_list(plot_list, save_loc)\n\n\n6.7.9.3 Arguments\n\n\n\nplot_list\na list of plots generated by fcutils::plot_xxxx() functions\n\n\nsave_loc\nlocation to save the plots to, including file name\n\n\n\n\n\n6.7.9.4 Value\nnothing (silently save the html to a user defined location)\n\n\n6.7.9.5 Examples\n## hold the plots in a list\nplot_out &lt;- list()\nfor (i in monthly_data_example[2:3] |&gt; names()) {\n  plot_out[[i]] &lt;- plot_1(\n    monthly_data_example |&gt; tsbox::ts_long() |&gt;\n      dplyr::filter(stringr::str_detect(id, i)),\n    rng_start = as.character(Sys.Date() - lubridate::years(5)),\n    rng_end = as.character(Sys.Date() + lubridate::years(7)),\n    width = 1500, height = 650, yoy_gr = TRUE\n  )\n}\n## specify location of the output\nsave_loc &lt;- stringr::str_c(\"~/Downloads/plots_\", Sys.Date(), \".html\")\n## combine a list of plots into a single html\n\nplot_out |&gt; save_plot_list(save_loc)\n\n\n\n6.7.10 uherotheme::uhero_theme()\n\n6.7.10.1 Description\nModifies the ggplot minimal theme to fit the style used for UHERO reports/presentations.\n\n\n6.7.10.2 Usage\nuhero_theme(layout = FALSE)\n\n\n6.7.10.3 Arguments\n\n\n\nlayout\nA boolean to indicate whether or not the theme is being applied to a plot that is to be used in a UHERO report layout. This defaults to false. If layout is TRUE, then the base size is set to 9 and the font family is set to open sans. If the parameter is FALSE, then the base size is set to 30 and the font family is set to opensans-semibold. Set layout to TRUE if the plot is being used for a UHERO report.\n\n\n\n\n\n6.7.10.4 Examples\nplot &lt;- ggplot2::ggplot(ggplot2::mpg) + uhero_theme()\n\n\n\n6.7.11 uherotheme::uhero_scale_nums()\n\n6.7.11.1 Description\nThis can be passed in to the labels parameter of ggplot scales like scale_x_continous() or scale_y_continuous() If the max value of the scale is larger than 1000, the tick labels will be scaled down with a suffix added to the maximum value. For max values of at least 10^3 but less than 10^6, tick labels will be divided by 10^3 with \"K\" added to the label for the maximum value. For max values of at least 10^6 but less than 10^9, tick labels will be divided by 10^6 with \"M\" added to the label for the maximum value. For max values of at least 10^9 but less than 10^12, tick labels will be divided by 10^9 with \"B\" added to the label for the maximum value.\n\n\n6.7.11.2 Usage\nuhero_scale_nums(\n  x,\n  scale_limit = max(x, na.rm = TRUE),\n  prefix = \"\",\n  percent = FALSE,\n  ...\n)\n\n\n6.7.11.3 Arguments\n\n\n\nx\nPassed in from labels function.\n\n\nscale_limit\nDefaults to the max value of the scale.\n\n\nprefix\nThis is optional and defaults to an empty string. This can be used to add things like currency labels, (i.e. \"$100\").\n\n\npercent\nBoolean that defaults to false. Set the value to true to add a \"%\" to the maximum value tick label.\n\n\n...\nAdditional arguments that can be passed to R's format().\n\n\n\n\n\n6.7.11.4 Value\nReturns a formatted string for the tick label.\n\n\n6.7.11.5 Examples\nset.seed(1)\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point() +\nggplot2::scale_y_continuous(labels = function(x) uhero_scale_nums(x, percent = TRUE)) +\nggplot2::scale_x_continuous(labels = function(x) uhero_scale_nums(x))\n\n\n\n6.7.12 uherotheme::uhero_colors()\n\n6.7.12.1 Description\nHex codes for a given color in the UHERO colors\n\n\n6.7.12.2 Usage\nuhero_colors(...)\n\n\n6.7.12.3 Arguments\n\n\n\n...\nNames of the UHERO colors. There are 14 total: \"blue\", \"orange\", \"green\", \"purple\", \"cyan\", \"gray\", \"red\", \"light blue\", \"light orange\", \"light green\", \"light purple\", \"light cyan\", \"light gray\", and \"light red\".\n\n\n\n\n\n6.7.12.4 Value\nA list of colors with their HEX codes.\n\n\n6.7.12.5 Examples\nuhero_colors(\"blue\")\nuhero_colors(\"blue\", \"light orange\")\n\n\n\n6.7.13 uherotheme::uhero_pal()\n\n6.7.13.1 Description\nA palette generator for UHERO colors.\n\n\n6.7.13.2 Usage\nuhero_pal(palette = \"primary\", discrete = TRUE, reverse = FALSE, ...)\n\n\n6.7.13.3 Arguments\n\n\n\npalette\nA string that defaults to \"primary\". This can also be set to either \"secondary\" or \"all\".\n\n\ndiscrete\nA boolean that defaults to TRUE. Set to FALSE for a continuous scale.\n\n\nreverse\nA boolean that defaults to FALSE. Set to TRUE to reverse the color scale.\n\n\n...\nAdditional parameters that can be passed to colorRampPalette\n\n\n\n\n\n6.7.13.4 Examples\nuhero_pal()\nuhero_pal(\"secondary\", discrete = TRUE, reverse = TRUE)\n\n\n\n6.7.14 uherotheme::uhero_scale_colour()\n\n6.7.14.1 Description\nUses ggplot2::discrete_scale for the color aesthetic for discrete scales and ggplot2::scale_colour_gradientn for the color aesthetic on continuous scales. uhero_scale_color is available as an alias.\n\n\n6.7.14.2 Usage\nuhero_scale_colour(palette = \"primary\", discrete = TRUE, reverse = FALSE, ...)\n\n\n6.7.14.3 Arguments\n\n\n\npalette\nA string that defaults to \"primary\". This can also be set to either \"secondary\" or \"all\".\n\n\ndiscrete\nA boolean that defaults to TRUE. Set to FALSE for a continuous scale.\n\n\nreverse\nA boolean that defaults to FALSE. Set to TRUE to reverse the color scale.\n\n\n...\nAdditional parameters that can be passed to ggplot2::discrete_scale or ggplot2::scale_fill_gradientn\n\n\n\n\n\n6.7.14.4 Examples\nggplot2::ggplot(ggplot2::mpg, ggplot2::aes(hwy, class, color = class)) +\nggplot2::geom_point(show.legend = FALSE) +\nuhero_scale_colour()\n\n\n\n6.7.15 uherotheme::uhero_scale_fill()\n\n6.7.15.1 Description\nUses ggplot2::discrete_scale for the fill aesthetic for discrete scales and ggplot2::scale_fill_gradientn for the fill aesthetic on continuous scales.\n\n\n6.7.15.2 Usage\nuhero_scale_fill(palette = \"primary\", discrete = TRUE, reverse = FALSE, ...)\n\n\n6.7.15.3 Arguments\n\n\n\npalette\nA string that defaults to \"primary\". This can also be set to either \"secondary\" or \"all\".\n\n\ndiscrete\nA boolean that defaults to TRUE. Set to FALSE for a continuous scale.\n\n\nreverse\nA boolean that defaults to FALSE. Set to TRUE to reverse the color scale.\n\n\n...\nAdditional parameters that can be passed to ggplot2::discrete_scale or ggplot2::scale_fill_gradientn\n\n\n\n\n\n6.7.15.4 Examples\nggplot2::ggplot(ggplot2::mpg, ggplot2::aes(hwy, fill = class)) +\nggplot2::geom_bar(show.legend = FALSE) +\nuhero_scale_fill(palette = 'secondary')\n\n\n\n6.7.16 uherotheme::uhero_scale_colour_diverge()\n\n6.7.16.1 Description\nUses ggplot2::scale_color_gradient2. uhero_scale_color_diverge is available as an alias.\n\n\n6.7.16.2 Usage\nuhero_scale_colour_diverge(high = \"blue\", low = \"orange\", ...)\n\n\n6.7.16.3 Arguments\n\n\n\nhigh\nA string that defaults to \"blue\". Can accept any of the other colors in uhero_color_list.\n\n\nlow\nA string that defaults to \"orange\". Can accept any of the other colors in uhero_color_list.\n\n\n...\nAny other parameters that can be passed to ggplot2::scale_color_gradient2\n\n\n\n\n\n6.7.16.4 Examples\nset.seed(1)\ndf &lt;- data.frame(\n x = runif(100),\n y = runif(100),\n z1 = rnorm(100),\n z2 = abs(rnorm(100))\n)\nggplot2::ggplot(df, ggplot2::aes(x, y)) +\nggplot2::geom_point(ggplot2::aes(colour = z1)) +\nuhero_scale_colour_diverge()\n\n\n\n6.7.17 uherotheme::uhero_scale_fill_diverge()\n\n6.7.17.1 Description\nUses ggplot2::scale_fill_gradient2\n\n\n6.7.17.2 Usage\nuhero_scale_fill_diverge(high = \"blue\", low = \"orange\", ...)\n\n\n6.7.17.3 Arguments\n\n\n\nhigh\nA string that defaults to \"blue\". Can accept any of the other colors in uhero_color_list.\n\n\nlow\nA string that defaults to \"orange\". Can accept any of the other colors in uhero_color_list.\n\n\n...\nAny other parameters that can be passed to ggplot2::scale_fill_gradient2\n\n\n\n\n\n\n6.7.18 uherotheme::draw_fcast_layout()\n\n6.7.18.1 Description\nThis modifies the size of the view port window to more accurately reflect the size of the figure including the placement of elements like data labels that would be used in a forecast layout.\n\n\n6.7.18.2 Usage\ndraw_fcast_layout(plot, w = 4.5, h = 2.45)\n\n\n6.7.18.3 Arguments\n\n\n\nplot\nPlot object\n\n\nw\nWidth of the view port in inches, defaults to 4.5\n\n\nh\nHeight of the view port in inches, defaults to 2.45\n\n\n\n\n\n6.7.18.4 Examples\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nplot &lt;- ggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point()\ndraw_fcast_layout(plot)\n\n\n\n6.7.19 uherotheme::draw_report_layout()\n\n6.7.19.1 Description\nThis modifies the size of the view port window to more accurately reflect the size of the figure including the placement of elements like data labels that would be used in a UHERO report layout. Sometimes charts may need to be a different size, so the function does accept parameters to change the width and height.\n\n\n6.7.19.2 Usage\ndraw_report_layout(plot, w = 5.6931, h = 4)\n\n\n6.7.19.3 Arguments\n\n\n\nplot\nPlot object\n\n\nw\nWidth of the view port in inches, defaults to 5.6931\n\n\nh\nHeight of the view port in inches, defaults to 4\n\n\n\n\n\n6.7.19.4 Examples\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nplot &lt;- ggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point()\ndraw_report_layout(plot)\n\n\n\n6.7.20 uherotheme::export_fcast_layout()\n\n6.7.20.1 Description\nUses ggplot2::ggsave to save a copy of the chart. By default, charts are sized at 4.5 x 2.45 inches. Sometimes charts may need to be larger, so the export function does accept parameters to change the width and height. Please try not to exceed 5 inches for the width. If the exported file is intended for use in a forecast layout, please use a '.svg', '.pdf', or '.eps' extension.\n\n\n6.7.20.2 Usage\nexport_fcast_layout(file_name, forecast_plot, w = 4.5, h = 2.45, u = \"in\", ...)\n\n\n6.7.20.3 Arguments\n\n\n\nfile_name\nA string for the file name, including the extension.\n\n\nforecast_plot\nGgplot plot object.\n\n\nw\nInteger - width of the exported image, defaults to 4.5\n\n\nh\nInteger - height of the exported image, defaults to 2.45\n\n\nu\nA string for the units, defaults to \"in\" for inches\n\n\n...\nAdditional parameters that can be passed to ggplot2::ggsave\n\n\n\n\n\n6.7.20.4 Examples\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nplot &lt;- ggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point()\nexport_fcast_layout('plot.svg', plot)\n\n\n\n6.7.21 uherotheme::export_report_layout()\n\n6.7.21.1 Description\nUses ggplot2::ggsave to save a copy of the chart. By default, charts are sized at 5.6931 x 4 inches. Sometimes charts may need to be larger, so the export function does accept parameters to change the width and height. Please use a '.svg', '.pdf', or '.eps' extension when exporting for a report layout.\n\n\n6.7.21.2 Usage\nexport_report_layout(file_name, plot, w = 5.6931, h = 4, u = \"in\", ...)\n\n\n6.7.21.3 Arguments\n\n\n\nfile_name\nA string for the file name, including the extension.\n\n\nplot\nGgplot plot object.\n\n\nw\nInteger - width of the exported image, defaults to 5.6931\n\n\nh\nInteger - height of the exported image, defaults to 4\n\n\nu\nA string for the units, defaults to \"in\" for inches\n\n\n...\nAdditional parameters that can be passed to ggplot2::ggsave\n\n\n\n\n\n6.7.21.4 Examples\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nplot &lt;- ggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point()\nexport_report_layout('plot.svg', plot)\n\n\n\n6.7.22 uherotheme::export_plot()\n\n6.7.22.1 Description\nUses ggplot2::ggsave to save a copy of the chart. By default the exports are sized at 1920 x 1080 pixels.\n\n\n6.7.22.2 Usage\nexport_plot(file_name, plot, w = 1920, h = 1080, u = \"px\", ...)\n\n\n6.7.22.3 Arguments\n\n\n\nfile_name\nA string for the file name, including the extension.\n\n\nplot\nGgplot plot object.\n\n\nw\nInteger - width of the exported image, defaults to 1920\n\n\nh\nInteger - height of the exported image, defaults to 1080\n\n\nu\nA string for the units, defaults to \"px\" for pixels\n\n\n...\nAdditional parameters that can be passed to ggplot2::ggsave\n\n\n\n\n\n6.7.22.4 Examples\ndf &lt;- data.frame(\n  x = rnorm(10) * 100000,\n  y = seq(0, 1, length.out = 10)\n)\nplot &lt;- ggplot2::ggplot(df, ggplot2::aes(x, y)) + ggplot2::geom_point()\nexport_report_layout('plot.png', plot)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#tsbox-extensions",
    "href": "fcutils.html#tsbox-extensions",
    "title": "6  Utility functions",
    "section": "6.8 tsbox extensions",
    "text": "6.8 tsbox extensions\n\n6.8.1 tsbox::ts_()\n\n6.8.1.1 Description\nts_ turns an existing function into a function that can deal with ts-boxable time series objects.\n\n\n6.8.1.2 Usage\nload_suggested(pkg)\n\nts_(fun, class = \"ts\", vectorize = FALSE, reclass = TRUE)\n\nts_apply(x, fun, ...)\n\n\n6.8.1.3 Arguments\n\n\n\npkg\nexternal package, to be suggested (automatically added by ts_) predict(). (See examples)\n\n\nfun\nfunction, to be made available to all time series classes\n\n\nclass\nclass that the function uses as its first argument\n\n\nvectorize\nshould the function be vectorized? (not yet implemented)\n\n\nreclass\nlogical, should the new function return the same same ts-boxable output as imputed?\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n...\narguments passed to subfunction\n\n\n\n\n\n6.8.1.4 Details\nThe ts_ function is a constructor function for tsbox time series functions. It can be used to wrap any function that works with time series. The default is set to R base \"ts\" class. ts_ deals with the conversion stuff, 'vectorizes' the function so that it can be used with multiple time series.\n\n\n6.8.1.5 Value\nA function that accepts ts-boxable time series as an input.\n\n\n6.8.1.6 See Also\nts_examples, for a few useful examples of functions generated by ts_.\nVignette on how to make arbitrary functions ts-boxable.\n\n\n6.8.1.7 Examples\nts_(rowSums)(ts_c(mdeaths, fdeaths))\nts_plot(mean = ts_(rowMeans)(ts_c(mdeaths, fdeaths)), mdeaths, fdeaths)\nts_(function(x) predict(prcomp(x)))(ts_c(mdeaths, fdeaths))\nts_(function(x) predict(prcomp(x, scale = TRUE)))(ts_c(mdeaths, fdeaths))\nts_(dygraphs::dygraph, class = \"xts\")\n\n## attach series to serach path\nts_attach &lt;- ts_(attach, class = \"tslist\", reclass = FALSE)\nts_attach(EuStockMarkets)\nts_plot(DAX, SMI)\ndetach()\n\n\n\n6.8.2 tsbox::ts_examples()\n\n6.8.2.1 Description\nExample Functions, Generated by ts_. ts_prcomp calculates the principal components of multiple time series, ts_dygraphs generates an interactive graphical visualization, ts_forecast return an univariate forecast, ts_seas the seasonally adjusted series. ts_na_interpolation imputes missing values.\n\n\n6.8.2.2 Usage\nts_prcomp(x, ...)\n\nts_dygraphs(x, ...)\n\nts_forecast(x, ...)\n\nts_seas(x, ...)\n\nts_na_interpolation(x, ...)\n\n\n6.8.2.3 Arguments\n\n\n\nx\nts-boxable time series, an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n...\nfurther arguments, passed to the underlying function. For help, consider these functions, e.g., stats::prcomp.\n\n\n\n\n\n6.8.2.4 Details\nWith the exception of ts_prcomp, these functions depend on external packages.\n\n\n6.8.2.5 Value\na ts-boxable object of the same class as x, i.e., an object of class ts, xts, zoo, zooreg, data.frame, data.table, tbl, tbl_ts, tbl_time, tis, irts or timeSeries.\n\n\n6.8.2.6 See Also\nVignette on how to make arbitrary functions ts-boxable.\n\n\n6.8.2.7 Examples\nts_plot(\n  ts_scale(ts_c(\n    Male = mdeaths,\n    Female = fdeaths,\n    `First principal compenent` = -ts_prcomp(ts_c(mdeaths, fdeaths))[, 1]\n  )),\n  title = \"Deaths from lung diseases\",\n  subtitle = \"Normalized values\"\n)\n\nts_plot(ts_c(\n  male = mdeaths, female = fdeaths,\n  ts_forecast(ts_c(`male (fct)` = mdeaths, `female (fct)` = fdeaths))\n),\ntitle = \"Deaths from lung diseases\",\nsubtitle = \"Exponential smoothing forecast\"\n)\n\nts_plot(\n  `Raw series` = AirPassengers,\n  `Adjusted series` = ts_seas(AirPassengers),\n  title = \"Airline passengers\",\n  subtitle = \"X-13 seasonal adjustment\"\n)\n\n\n## See ?imputeTS::na_interpolation for options\ndta &lt;- ts_c(mdeaths, fdeaths)\ndta[c(1, 3, 10), c(1, 2)] &lt;- NA\nhead(ts_na_interpolation(dta, option = \"spline\"))\n\nts_dygraphs(ts_c(mdeaths, EuStockMarkets))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#bimets-and-gets-utilities",
    "href": "fcutils.html#bimets-and-gets-utilities",
    "title": "6  Utility functions",
    "section": "6.9 bimets and gets utilities",
    "text": "6.9 bimets and gets utilities\n\n6.9.1 fcutils::set_tsrange()\n\n6.9.1.1 Description\nSet tsrange for behavioral equations to available data range\n\n\n6.9.1.2 Usage\nset_tsrange(model_w_dat, max_lag = 4, eqns = NULL)\n\n\n6.9.1.3 Arguments\n\n\n\nmodel_w_dat\nbimets model (with data) to be estimated\n\n\nmax_lag\nthe largest lag (default = 4) in the model (to offset starting point for estimation)\n\n\neqns\nnames of behavioral equations to set tsrange for (default = NULL: all equations)\n\n\n\n\n\n6.9.1.4 Details\nFind periods where all variables in the equation are available. Shift beginning of the sample by max_lag periods. Set the tsrange for each equation (used in estimation).\n\n\n6.9.1.5 Value\nbimets model with tsrange set for estimation\n\n\n6.9.1.6 Examples\nset_tsrange(scen_model_dat, 4)\n\n\n\n6.9.2 fcutils::update_eqs()\n\n6.9.2.1 Description\nUpdate a bimets model with new/modified equations\n\n\n6.9.2.2 Usage\nupdate_eqs(model_1, model_2, eqList)\n\n\n6.9.2.3 Arguments\n\n\n\nmodel_1\noriginal estimated bimets model\n\n\nmodel_2\nestimated bimets model containing updates (only updated equations need to be estimated)\n\n\neqList\nnames of updated behavioral equations (vector of strings), others taken from model_1 (equations missing from model_2 are removed)\n\n\n\n\n\n6.9.2.4 Details\nStart by making a copy of the original model's equations (txt file). Re-specify some equations, add new equations, and remove not needed equations. Load the new model as model_2 and estimate the modified/new equations (ok to estimate all). Replace the equations in model_2 that should remain the same as in model_1 by the estimated equations from model_1. Equations that are to remain unchanged have to be present in both model_1 and model_2, and not present in eqList.\n\n\n6.9.2.5 Value\nestimated bimets model containing updates\n\n\n6.9.2.6 Examples\nupdate_eqs(scen_model_1_est, scen_model_2_est, c(\"E_NF_AT_HI_Q\", \"Y_R_AT_HI_Q\"))\n\n\n\n6.9.3 fcutils::extract_data()\n\n6.9.3.1 Description\nParse gets output and extract underlying data (GETS model development)\n\n\n6.9.3.2 Usage\nextract_data(model_in, y_name)\n\n\n6.9.3.3 Arguments\n\n\n\nmodel_in\na model estimated by arx, isat, or getsm\n\n\ny_name\nthe actual name of the y variable\n\n\n\n\n\n6.9.3.4 Value\nan xts containing the model variables\n\n\n6.9.3.5 Examples\n## save the data associated with a gets model\n\n\n\n6.9.4 fcutils::model_equation()\n\n6.9.4.1 Description\nParse lm() output and convert into bimets equation (GETS model development)\n\n\n6.9.4.2 Usage\nmodel_equation(model, ...)\n\n\n6.9.4.3 Arguments\n\n\n\nmodel\na model estimated by lm() (lm object)\n\n\n...\narguments to format the coefficients e.g. digits = 3\n\n\n\n\n\n6.9.4.4 Value\na character vector containing the estimated equation (1) and bimets components (2:4)\n\n\n6.9.4.5 Examples\n## this function combines coefficient estimates and variable names into an equation\n## in vector element 1 and into bimets components in vector elements 2-4.\n## https://stats.stackexchange.com/questions/63600/\n## how-to-translate-the-results-from-lm-to-an-equation\ndata(\"UKDriverDeaths\", package = \"datasets\")\nuk &lt;- log10(UKDriverDeaths)\ndfm &lt;- dynlm::dynlm(uk ~ L(uk, 1:3) + L(log(uk), c(5:6, 12)))\nmodel_equation(dfm)\n## (1) \"uk = - 0.12255631 + 0.42870091 * L(uk, 1:3)1 + 0.06306114 * L(uk, 1:3)2 - 0.09778518 *\n## L(uk, 1:3)3 + 0.37480999 * L(log(uk), c(5:6, 12))5 - 0.22709846 * L(log(uk), c(5:6, 12))6 +\n## 1.62340449 * L(log(uk), c(5:6, 12))12\"\n## (2) \"BEHAVIORAL&gt; uk\"\n## (3) \"EQ&gt; uk = b0 + b1 * TSLAG(uk, 1) + b2 * TSLAG(uk, 2) + b3 * TSLAG(uk, 3) + b4 *\n## TSLAG(LOG(uk), 5) + b5 * TSLAG(LOG(uk), 6) + b6 * TSLAG(LOG(uk), 12)\"\n## (4) \"COEFF&gt; b0 b1 b2 b3 b4 b5 b6\"\n### fcutils::model_equation()\ndfm &lt;- dynlm::dynlm(d(log(uk)) ~ L(uk, c(1, 11, 12)), start = c(1975, 1), end = c(1982, 12))\nmodel_equation(dfm)\n## (1) \"d(log(uk)) = 0.1018542 - 0.2379287 * L(uk, c(1, 11, 12))1 + 0.0368355 *\n## L(uk, c(1, 11, 12))11 + 0.1689896 * L(uk, c(1, 11, 12))12\"\n## (2) \"BEHAVIORAL&gt; TSDELTA_LOG_uk\"\n## (3) \"EQ&gt; TSDELTA(LOG(uk)) = b0 + b1 * TSLAG(uk, 1) + b2 * TSLAG(uk, 11) + b3 * TSLAG(uk, 12)\"\n## (4) \"COEFF&gt; b0 b1 b2 b3\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "fcutils.html#fcutils-constants",
    "href": "fcutils.html#fcutils-constants",
    "title": "6  Utility functions",
    "section": "6.10 fcutils constants",
    "text": "6.10 fcutils constants\nThe fcutils package assumes a date range for data sets. Unless specified by the user, the start and end date are set by default to:\nbnk_start = \"1970-01-01\"\nbnk_end = \"2060-12-31\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Utility functions</span>"
    ]
  },
  {
    "objectID": "bestpract.html",
    "href": "bestpract.html",
    "title": "7  Best practices for time series data manipulation",
    "section": "",
    "text": "7.1 Harness the power of tsbox\nUse the converter functions in tsbox to shift between various data types (ts_tbl(), ts_xts(), ts_ts(), ts_tslist()) and reshaping to the long and wide format (ts_long(), ts_wide()). tsbox further contains funtions for time period selection (ts_span()), merging and extension operations (ts_c(), ts_bind(), ts_chain()), transformations (ts_lag(), ts_pc(), ts_pca(), ts_pcy(), ts_diff(), ts_diffy()), and index construction (ts_compound(), ts_index()). These functions are described in Section 6. Consider these tsbox functions before turning to solutions that are specific to the xts, ts, dplyr or tidyr packages.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Best practices for time series data manipulation</span>"
    ]
  },
  {
    "objectID": "modselect.html",
    "href": "modselect.html",
    "title": "8  Model selection and simulation",
    "section": "",
    "text": "8.1 Main user settings\nBefore diving into the automated steps, users must specify several key parameters that control the model selection process:\nIf no additional regressors are considered set xvar_list &lt;- c().",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#main-user-settings",
    "href": "modselect.html#main-user-settings",
    "title": "8  Model selection and simulation",
    "section": "",
    "text": "mselect_start and mselect_end: Define the start and end dates of the period used for model selection. This is the sample over which the gets algorithm will evaluate potential models.\n\nest_end: Specifies the end of the period used for estimation. While the model selection process might consider data up to mselect_end, the final model can be re-estimated using a shorter sample ending at est_end. This is useful when recent data is deemed less reliable or structurally different.\n\nfcst_start and fcst_end: Define the start and end dates of the quasi-forecast period. This is the period over which the model’s forecasting performance will be evaluated. The model is simulated forward from fcst_start, and the simulated values are compared against actual data (if available) up to fcst_end.\n\nmax_lag: Specifies the maximum number of lags to be considered for each predictor variable in the model. For example, if max_lag is 4, the model selection process will consider the current value and up to four lagged values of each predictor.\n\nyvar_name: The name of the response variable to be forecasted. This must correspond to the name of a variable in the downloaded dataset. For example: yvar_name &lt;- \"E_NF_AT_HI_QL\" specifies the log of non-farm employment in Hawaii as the target variable.\n\nxvar_list: A vector of names of potential predictor variables. These can include economic indicators, other related time series, or even transformations of the response variable itself. For instance:\n\n\n# list of candidate variables (logs are denoted by _QL extension)\nxvar_list &lt;- c(\n  \"Y_R_AT_HI_QL\", # Log of real income in Hawaii\n  \"VIS_AT_HI_QL\", # Log of visitor arrivals in Hawaii         \n  \"CPI_AT_HON_QL\" # Log of CPI in Honolulu\n)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#data-preparation-tidyverse",
    "href": "modselect.html#data-preparation-tidyverse",
    "title": "8  Model selection and simulation",
    "section": "8.2 Data preparation (tidyverse)",
    "text": "8.2 Data preparation (tidyverse)\nThe data preparation stage involves several steps to transform the raw data downloaded from UDAMAN into a format suitable for model selection:\n\n8.2.1 Data Download and Initial Processing\n\nDownload all series used in the model selection process from UDAMAN (about 500 rows and 1200 columns) and eliminate special characters from the series names.\n\nThe data is converted to a long format using ts_long().\n\n\n\n8.2.2 Log Transformation\n\nAll variables in the dataset are log-transformed using. This is a common practice in time series analysis to stabilize variance and linearize relationships. The names of the log-transformed variables are appended with “L”. For example, E_NF_AT_HI becomes E_NF_AT_HI_L. Note that, depending on the data, this may result in NaN values which will be handled by the gets algorithm during model selection.\n\n# take the log of all series (some will produce NaNs)\nhist_ql &lt;- hist_q %&gt;%\n  mutate(value = log(value)) %&gt;%\n  mutate(id = str_c(id, \"L\"))\n\n\n8.2.3 Indicator Variable Creation\n\nIndicator variables, also known as dummy variables, are created to capture the effects of specific events or periods. The script allows for loading previously saved indicators (indicators_from_disk) or creating them from scratch.\n\nImpulse Indicator Series (IIS): These are binary variables that take the value 1 in a specific quarter and 0 otherwise. They are used to capture the impact of one-time events or shocks. These dummies are useful to control for one-time temporary shocks such as hurricanes, policy changes or one-time bonuses paid out in a particular quarter. Without controlling for these events, the model would try to fit these extraordinary data points using regular predictors, which may lead to biased estimates.\n\nStep Indicator Series (SIS): These variables take the value 0 before a certain date and 1 thereafter. They are used to model structural breaks or permanent level shifts in the time series. A typical example of when these indicator series might be useful is the case of a permanent policy change, introduction of a major competitor, or a permanent change in consumer preferences. By introducing a SIS, the model can account for these changes without biasing estimates for the entire sample.\n\nSeason Dummies: These variables capture the seasonal patterns in the data. For quarterly data, four seasonal dummies are created (IQ1, IQ2, IQ3, IQ4), each taking the value 1 in the corresponding quarter and 0 otherwise. A typical example of quarterly seasonal pattern are fourth quarter spending sprees related to holidays, or seasonal variations in tourism related to weather conditions and holidays in other countries.\n\nTrend Indicator: A linear trend variable (ITREND) is created to capture the overall upward or downward movement of the time series over time. For example, technological progress or population growth may cause a steady upward trend in economic time series such as income or consumption.\n\n\n# combine indicators into single data frame\nindicator_vars &lt;- ts_c(\n  iis_indicators %&gt;% ts_long(),\n  sis_indicators %&gt;% ts_long(),\n  season_indicators %&gt;% ts_long(),\n  trend_indicator %&gt;% ts_long()\n)\n\n\n8.2.4 Data Combination\n\nThe original data, log-transformed data, and indicator variables are combined into a single dataset using ts_c().\n\n\n\n8.2.5 Data Subsetting\n\nThe dataset is filtered to include only the observations within the mselect_start and mselect_end range. The data is also subset based on the yvar_name and xvar_list to retain only the variables relevant for the specific model being considered.\n\n\n\n8.2.6 Lag Generation\n\nLags of the predictor variables are generated using ts_lag() and combined using ts_c(). This creates a dataset containing the current and lagged values (up to max_lag) of each predictor.\n\n# generate lags of selected predictors\nxvar_lags &lt;- 0:max_lag %&gt;% \n  map(~ts_lag(xvar_0, .x)) %&gt;% \n  reduce(ts_c)\n\n\n8.2.7 Data Transformation to xts\n\nThe response variable and the combined predictor variables (including lags, trend, and seasonal dummies) are converted to xts objects for use with the gets package.\n\n# transform to xts\nyvar_xts &lt;- yvar_0 %&gt;%\n  ts_xts()\n\n# transform to xts\nxvar_xts &lt;- xvar_all %&gt;%\n  ts_xts()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#model-selection-steps-gets",
    "href": "modselect.html#model-selection-steps-gets",
    "title": "8  Model selection and simulation",
    "section": "8.3 Model selection steps (gets)",
    "text": "8.3 Model selection steps (gets)\nThe core of the model selection process is handled by the gets package, which implements a general-to-specific (GETS) algorithm:\n\n8.3.1 Formulate a General Unrestricted Model (GUM)\n\nThe GETS process begins with a GUM that includes all potential regressors (predictors, lags, indicators). In our case this includes an autoregressive term, trend and seasonal dummies. The arx() function is used to estimate the GUM using the yvar_xts and xvar_xts data. The mc = TRUE argument specifies that a constant term should be included. The ar = 1:max_lag argument indicates that autoregressive terms up to the specified max_lag should be included.\nThe arx() function is also capable of detecting variance anomalies in the error terms, such as autoregressive conditional heteroskedasticity (ARCH).\n\n# formulate a general unrestricted model\n# NA-s are automatically eliminated from the data\n  gum_model &lt;- arx(y = yvar_xts, mc = TRUE, ar = 1:max_lag, mxreg = xvar_xts)\n\n\n8.3.2 Run the gets Algorithm\n\nFirst, the isat() function is applied to the GUM data to identify outliers in the unrestricted model using indicator variables. Outliers are defined as those observations whose residuals are deemed too large, possibly due to some extraordinary events. The outlier identification takes into account heteroskedasticity or autocorrelation in the residuals.\n\n# identify outliers in the GUM ----\nisat_model &lt;- isat(y = gum_data[, 1], \n  mc = TRUE, \n  mxreg = gum_data[, -1], \n  ar.LjungB = list(lag=max_lag, \n  pval=0.01), \n  arch.LjungB = list(lag=max_lag, pval=0.01), \n  iis = TRUE, \n  sis = TRUE, \n  plot = TRUE\n)\n\nNext, the getsm() function is applied to the outlier-augmented model to perform the general-to-specific model selection. It starts with the GUM and iteratively eliminates insignificant regressors based on their t-statistics and diagnostic tests for autocorrelation (Ljung-Box Q-test) and autoregressive conditional heteroskedasticity (ARCH LM test) in the error terms. The t.pval argument sets the significance level for retaining regressors. The keep argument can be used to force certain variables to be kept in the model regardless of their significance.\n\n# run the gets (general to specific) model selection algorithm ----\ngets_model &lt;- getsm(isat_model, \n  t.pval = 0.01, \n  ar.LjungB = list(lag=max_lag, pval=0.01), \n  arch.LjungB = list(lag=max_lag, \n  pval=0.01), \n  keep = c(1))\n\n\n8.3.3 Identify Outliers in the Relationship\n\nAfter the initial GETS selection, the isat() function is applied to the residuals of the selected model to identify any remaining outliers. This is important, because the initial model selection process may produce a different residual series which now exhibits new outliers.\n\n# check outliers in the residuals\nisat_res &lt;- gets_model %&gt;%\n  residuals() %&gt;%\n  isat()\n\n\n8.3.4 Repeat gets Model Selection (Optional)\n\nIf second_pass is set to TRUE, the model selection process is repeated, but this time including the newly identified outliers as regressors. This step further refines the model and ensures that the final specification is robust to outliers in the data.\n\n\n\n8.3.5 Verify if Additional Outliers Arose Due to Greater Model Parsimony\n\nA final check is performed using isat() on the final model’s residuals to ensure that no additional outliers have emerged due to the model simplification process. The isatvar() function can then be used to extract the estimated path of the constant, incorporating any significant shifts indicated by the outlier analysis.\nThe isattest() function generates a plot showing the significant shifts in the constant over time.\n\n\n\n8.3.6 Handle Zero-Valued Predictors\n\nIf the estimation period (est_end) is shorter than the model selection period (mselect_end), some predictors (e.g., outlier dummies) might contain only zeros in the estimation sample. These variables are identified and removed from the dataset to avoid issues during estimation.\n\nThis step recognizes that the outliers that occurred after est_end will not be relevant for the estimation of the model going forward.\n\n# find all variables with only zeros in the estimation period (if shorter than model selection period)\nzero_vars &lt;- gets_data %&gt;%\n  ts_span(end = est_end) %&gt;%\n  ts_tbl() %&gt;%\n  mutate(value = abs(value)) %&gt;%\n  group_by(id) %&gt;%\n  summarize(sum_vals = sum(value)) %&gt;%\n  filter(sum_vals == 0) %&gt;%\n  pull(id)\n\n# remove zero valued variables from the estimation sample\nest_data &lt;- gets_data %&gt;%\n  ts_span(end = est_end) %&gt;%\n  ts_tbl() %&gt;%\n  ts_wide() %&gt;%\n  select(-all_of(zero_vars)) %&gt;%\n  ts_long() %&gt;%\n  ts_xts()\n\n\n8.3.7 Re-estimate Final Model\n\nThe final selected model is re-estimated using lm().\n\n# re-estimate re-specified model via lm using the estimation sample\n  est_lm &lt;- lm(as.formula(str_c(yvar_name, \" ~ .\")), data = est_data)\n\n\n8.3.8 Save Model Equation\n\nThe final model equation is saved as a text file (model_eq.txt) using the model_equation() function. This function formats the model output into an equation that can be read by the bimets package. Since the equation can be later re-estimated in bimets, the saved equation does not contain the estimated coefficients to keep it general.\n\n# look at estimated model and bimets model components\nmodel_equation(est_lm)\n\n# save equation\nif (save_eq) {\n  sink(here(\"output\", \"model_eq.txt\"), append = TRUE)\n  cat(str_glue(\"\n\n    {model_equation(est_lm)[2:4]}\n\n  \"))\n  sink()\n}",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#produce-a-quasi-forecast-with-the-selected-model-bimets",
    "href": "modselect.html#produce-a-quasi-forecast-with-the-selected-model-bimets",
    "title": "8  Model selection and simulation",
    "section": "8.4 Produce a quasi-forecast with the selected model (bimets)",
    "text": "8.4 Produce a quasi-forecast with the selected model (bimets)\nAfter selecting the model using gets, the bimets package is used to estimate the model and produce a quasi-forecast:\n\n8.4.1 Load Model and Data\n\nThe LOAD_MODEL() function loads the model equation from the saved text file. The LOAD_MODEL_DATA() function then combines the model with the relevant data, ensuring that all variables used in the model are present in the dataset.\n\n# load model from stored txt file\nmodel_eq &lt;- bimets::LOAD_MODEL(modelFile = here(\"output\", \"model_eq.txt\"))\n\n# store variables in bimets format (no ragged edge: drop_na)\nhist_q_bimets &lt;- hist_q_mod %&gt;%\n  filter(id %in% c(model_eq$vendog, model_eq$vexog)) %&gt;%\n  ts_wide() %&gt;% \n  drop_na() %&gt;% \n  ts_long() %&gt;% \n  ts_tslist() %&gt;%\n  map(bimets::as.bimets)\n\n# add data to model\nmodel_eq_dat &lt;- bimets::LOAD_MODEL_DATA(\n  model_eq,\n  hist_q_bimets\n)\n\n\n8.4.2 Estimate the Model\n\nThe ESTIMATE() function estimates the model using the specified estimation range (est_range). If the forecast end date (fcst_end) is later than the estimation end date, a Chow test for structural stability is automatically performed. The Chow test assesses whether the model’s parameters are constant over the estimation and forecast periods. The CHOWPAR argument specifies the date at which the data is split for the Chow test.\n\n# determine range of history for estimation\nest_range &lt;- model_eq_dat$modelData %&gt;% \n  set_attr_tslist() %&gt;%\n  ts_xts() %&gt;% \n  zoo::index() %&gt;%\n  extract(c(max_lag+1, length(.)))\n\n# estimate model\nif (floor_date(fcst_end, \"quarter\") &lt;= floor_date(est_range[2], \"quarter\")) {\n  model_est &lt;- bimets::ESTIMATE(model_eq_dat,\n    eqList = model_eq_dat$vendog,\n    TSRANGE = c(year(est_range[1]), quarter(est_range[1]), year(est_range[2]), quarter(est_range[2])),\n    quietly = FALSE\n  )\n} else {\n  model_est &lt;- bimets::ESTIMATE(model_eq_dat,\n    eqList = model_eq_dat$vendog,\n    TSRANGE = c(year(est_range[1]), quarter(est_range[1]), year(est_range[2]), quarter(est_range[2])),\n    CHOWTEST = TRUE,\n    CHOWPAR = c(year(fcst_end), quarter(fcst_end)),\n    quietly = FALSE\n  )\n}\n\n\n8.4.3 Simulate the Model\n\nStatistical models generate forecasts based on historical data patterns and estimated relationships between variables. These models often assume that the underlying structure and relationships observed in the past will continue to hold in the future. There might be events or changes that are known (or believed) to occur in the future but are not reflected in the historical data or the model’s structure. Set addfactors to adjust the forecast path. An addfactor is a value that is added to the model’s forecast for a specific variable and time period. It’s essentially a way to incorporate external information, expert opinion, or subjective judgment into a model-based forecast. Addfactors are used to bridge the gap between purely model-based forecasts and external information or judgment. They are expressed in the same units as the variable being forcasted.\n\n# set value of addfactors\nscen_addfactor &lt;- hist_q_mod %&gt;%\n  filter(id %in% str_glue(\"{model_eq_dat$vendog}\")) %&gt;%\n  mutate(value = 0) %&gt;%\n  ts_tslist() %&gt;%\n  map(bimets::as.bimets)\n  \n# update an addfactor stored in xts format\nadd_qmod.xts$NDEA_HI %+=% addf(2021.4, 2024.4, .01, .025)\n  \n\nThe SIMULATE() function simulates the model over the forecast period (fcst_start to fcst_end). The simType = \"FORECAST\" argument specifies that a deterministic forecast should be produced.\nThe simConvergence and simIterLimit arguments control the convergence criteria and maximum number of iterations for the simulation algorithm. These parameters are particularly relevant for models with simultaneous equations, where the values of endogenous variables depend on each other. The simulation algorithm iteratively solves the system of equations until the solution converges or the maximum number of iterations is reached.\nUse the fcutils::set_tsrange() function to deal with a ragged edge in the data and prepare the exogenization range for the Exogenize parameter of the SIMULATE() function.\n\n# simulate model\nmodel_sim &lt;- bimets::SIMULATE(model_est,\n  simType = \"FORECAST\",\n  TSRANGE = c(year(fcst_start), quarter(fcst_start), year(fcst_end), quarter(fcst_end)),\n  ConstantAdjustment = scen_addfactor,\n  Exogenize = exog_range,\n  simConvergence = 0.00001,\n  simIterLimit = 100,\n  quietly = FALSE\n)\n\n\n8.4.4 Evaluate the Simulation\n\nThe simulated values (forecast) are extracted from the model_sim object and combined with the historical data for evaluation. The plot_comp_2() function is used to generate plots comparing the quasi-forecast with the actual history. These plots help assess the model’s ability to capture the dynamics of the time series and its potential forecasting accuracy.\n\n# extract forecast\nmodel_fcst &lt;- model_sim$simulation %&gt;%\n  extract(model_sim$vendog) %&gt;%\n  set_attr_tslist() %&gt;%\n  ts_tbl() %&gt;%\n  mutate(id = str_c(model_sim$vendog, \"SOL\"), .before = time)\n\n# combine history and forecast for plot\nplot_data_fcst &lt;- ts_c(hist_q_mod %&gt;% filter(id %in% model_sim$vendog), model_fcst) %&gt;%\n  ts_wide() %&gt;%\n  slice(which(!is.na(!!sym(model_sim$vendog)) | !is.na(!!sym(str_glue(\"{model_sim$vendog}SOL\")))))\n\nplot_comp_2(plot_data_fcst %&gt;% ts_long(), \n  rng_start = as.character(Sys.Date() - years(15)), \n  rng_end = fcst_end %&gt;% as.character(), \n  height = 200, width = 400\n)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#stochastic-simulation",
    "href": "modselect.html#stochastic-simulation",
    "title": "8  Model selection and simulation",
    "section": "8.5 Stochastic simulation",
    "text": "8.5 Stochastic simulation\nThe preceding workflow can be extended with stochastic simulation. If necessary it is preceded by the same data preparation and model selection steps.\n\n8.5.1 Simulate model deterministically to obtain mean forecast.\nThe first step for obtaining a forecast interval is to simulate the estimated model deterministically. In a deterministic simulation, the model’s equations are solved without any random shocks. This produces a single “mean” forecast, representing the most likely path of the endogenous variables given the model’s structure, estimated parameters, and any specified exogenous assumptions.\n\n\n8.5.2 Extract forecast and combine it with history.\nAfter the deterministic simulation, the forecasted values are extracted from the simulation object. The historical data and the forecasted values are combined to facilitate comparison and visualization.\n\n\n8.5.3 Inspect the forecast via plots.\nThen generate plots to visually compare the historical data and the deterministic forecast. These plots allow for a visual assessment of the forecast’s behavior compared to the historical data. For example, one can observe whether the forecast captures the overall cycles in the historical data, and whether there are any abrupt changes or discontinuities at the forecast origin.\n\n\n8.5.4 Set parameters for stochastic simulations.\nStochastic simulation introduces randomness into the model to generate a distribution of possible future paths, rather than just a single mean forecast. This helps to quantify the uncertainty surrounding the forecast.\nThe first step in stochastic simulation is to define the structure of the random shocks. This is done by creating a list called myStochStructure:\n# set parameters for stochastic simulation\nmyStochStructure &lt;- list()\nfor (ser_i in scen_model$vendog) {\n  myStochStructure[[ser_i]] &lt;- list(\n    TSRANGE = TRUE,\n    TYPE = \"NORM\",\n    PARS = c(0, scen_model_est$behaviorals[[ser_i]][[\"statistics\"]][[\"StandardErrorRegression\"]])\n  )\n}\n\nThe code iterates through each endogenous variable (ser_i).\nFor each variable, it creates a list specifying the parameters of the random shocks:\n\nTSRANGE = TRUE: Indicates that the shocks should be applied throughout the entire simulation period.\nTYPE = \"NORM\": Specifies that the shocks should be drawn from a normal distribution.\nPARS: Defines the parameters of the normal distribution. In this case, the mean is set to 0 and the standard deviation is set to the standard error of the regression for the corresponding equation. This means that the random shocks are scaled to the estimated uncertainty of each equation. The standard deviation of the error term is obtained from the estimation output, and it reflects the historical volatility of the residuals.\n\n\nIn addition to perturbing the error terms, the script also allows for perturbing the estimated coefficients. This captures the uncertainty in the parameter estimates themselves.\n# perturb coefficients (draw from multivariate normal distro)\nset.seed(987)\nscen_model_est_copy &lt;- scen_model_est\nscen_model_est_pars &lt;- scen_model_est$behaviorals %&gt;%\n  map(~ if (n_coeff_sim &gt; 0) {\n    cbind(\n      .x$coefficients,\n      MASS::mvrnorm(n = n_coeff_sim, mu = .x$coefficients, Sigma = .x$statistics$CoeffCovariance) %&gt;% t()\n    )\n  } else {\n    .x$coefficients\n  })\n\nset.seed(987): Sets the random seed for reproducibility.\nscen_model_est_copy &lt;- scen_model_est: Creates a copy of the estimated model object.\nscen_model_est_pars: Stores the perturbed coefficients.\nThe code iterates through each equation in scen_model_est$behaviorals.\nIf n_coeff_sim is greater than 0, it draws n_coeff_sim sets of coefficients from a multivariate normal distribution using MASS::mvrnorm(). The mean of the distribution is the original estimated coefficients (.x$coefficients), and the covariance matrix is the estimated covariance matrix of the coefficients (.x$statistics$CoeffCovariance). This ensures that the perturbed coefficients are consistent with the estimated uncertainty and correlations among the parameters.\nIf n_coeff_sim is 0 (coefficients are not drawn randomly), the original coefficients are used without perturbation.\n\n\n\n8.5.5 Run stochastic simulation.\nThe stochastic simulation is performed using the STOCHSIMULATE() function in bimets:\n# create variables to hold stochastic simulation objects and forecasts\nscen_model_stochsim &lt;- list()\nscen_model_stochfcast &lt;- list()\n\n# loop over the parameter draws (first one is the estimate)\nfor (sim_i in 1:(n_coeff_sim + 1)) { # sim_i = 1\n\n  # set params for each equation\n  for (eq_i in scen_model_dat$vendog) { # eq_i = scen_model_dat$vendog[1]\n    scen_model_est_copy$behaviorals[[eq_i]][[\"coefficients\"]][, 1] &lt;- scen_model_est_pars[[eq_i]][, sim_i]\n  }\n\n  # simulate model\n  scen_model_stochsim[[sim_i]] &lt;- bimets::STOCHSIMULATE(scen_model_est_copy,\n    simType = \"FORECAST\",\n    TSRANGE = c(year(fcst_start), quarter(fcst_start), year(fcst_end), quarter(fcst_end)),\n    Exogenize = exog_range,\n    simConvergence = 0.00001,\n    simIterLimit = 100,\n    StochStructure = myStochStructure,\n    StochReplica = n_stoch_sim,\n    StochSeed = 123 + sim_i,\n    quietly = FALSE\n  )\n\n  # extract forecast\n  scen_model_stochfcast[[sim_i]] &lt;- scen_model_stochsim[[sim_i]][[\"simulation_MM\"]] %&gt;%\n    extract(scen_model$vendog)\n}\n\nThe code loops n_coeff_sim + 1 times. In the first iteration (sim_i = 1), the original estimated coefficients are used. In subsequent iterations, the perturbed coefficients are used.\nInside the loop, for each iteration:\n\nThe coefficients in scen_model_est_copy are updated with the current set of perturbed coefficients.\nSTOCHSIMULATE() is called to perform the stochastic simulation.\nStochStructure = myStochStructure: Specifies the structure of the random shocks defined earlier.\nStochReplica = n_stoch_sim: Sets the number of stochastic replications for each set of coefficients. Each replication involves drawing a new set of random shocks and simulating the model.\nStochSeed = 123 + sim_i: Sets the random seed for each iteration, ensuring reproducibility.\nThe simulated paths are extracted from scen_model_stochsim[[sim_i]][[\"simulation_MM\"]] and stored in scen_model_stochfcast[[sim_i]].\n\n\n\n\n8.5.6 Extract simulated paths and obtain deviations from the mean forecast.\nAfter the stochastic simulation, the simulated paths are processed to analyze the distribution of possible outcomes:\n# convert matrices in the list to ts_long format\nscen_model_stochfcast &lt;- scen_model_stochfcast %&gt;%\n  map_depth(2, function(x) {\n    as_tibble(x, .name_repair = NULL) %&gt;%\n      mutate(time = seq.Date(from = fcst_start, to = fcst_end, by = \"quarter\"), .before = 1) %&gt;%\n      ts_long()\n  })\n\n# forecast deviations\nscen_model_stochdev &lt;- scen_model_stochfcast %&gt;%\n  map_depth(2, function(x) {\n    ts_wide(x) %&gt;%\n      mutate(across(V1:last_col(), ~ (.x / V1) - 1)) %&gt;%\n      select(-V1) %&gt;%\n      ts_long()\n  })\n\nscen_model_stochfcast is transformed using map_depth(2, ...) to apply a function to each simulated path (each element at depth 2 of the nested list).\n\nas_tibble() converts the matrix of simulated values to a tibble.\nmutate(time = ...) adds a time index.\nts_long() converts the data to long format.\n\nscen_model_stochdev calculates the deviations of each simulated path from the mean forecast (the first path, V1).\n\nts_wide() converts the data to wide format.\nmutate(across(V1:last_col(), ~ (.x / V1) - 1)) calculates the percentage deviation of each column (simulated path) from the first column (mean forecast).\nselect(-V1) removes the mean forecast column.\nts_long() converts the data back to long format.\n\n\nThe script then calculates quantiles of the distribution of deviations:\n# quantiles\nscen_model_quantiles &lt;- scen_model_stochdev %&gt;%\n  transpose() %&gt;%\n  map_depth(2, ts_wide) %&gt;%\n  map(~ reduce(.x, function(x1, x2) full_join(x1, x2, by = \"time\"))) %&gt;%\n  map(function(x) {\n    # ts_wide(x) %&gt;%\n    rowwise(x) %&gt;%\n      transmute(\n        time = time,\n        Q05 = quantile(c_across(-1), 0.05),\n        Q10 = quantile(c_across(-1), 0.10),\n        Q20 = quantile(c_across(-1), 0.20),\n        Q50 = quantile(c_across(-1), 0.50),\n        Q80 = quantile(c_across(-1), 0.80),\n        Q90 = quantile(c_across(-1), 0.90),\n        Q95 = quantile(c_across(-1), 0.95),\n      ) %&gt;%\n      ungroup()\n  })\n\ntranspose() transposes the nested list structure of scen_model_stochdev.\nmap_depth(2, ts_wide) converts each set of deviations to wide format.\nmap(~ reduce(.x, ...)) combines the deviations for each variable into a single tibble.\nmap(function(x) ...) calculates the quantiles for each time period using quantile().\n\nThe resulting scen_model_quantiles object contains the 5th, 10th, 20th, 50th, 80th, 90th, and 95th percentiles of the distribution of deviations for each variable.\n\n\n8.5.7 Inspect the paths via plots.\nFinally, the script generates plots to visualize the simulated paths and the quantiles:\n# generate plots (compare levels)\npdf(here(\"output/plots\", \"stoch_plot.pdf\"))\n\nfor (ser_i in scen_model$vendog) { # ser_i = scen_model$vendog[1]\n  plot_out &lt;- scen_model_stochfcast %&gt;%\n    transpose() %&gt;%\n    map_depth(2, ts_wide) %&gt;%\n    map(~ reduce(.x, function(x1, x2) full_join(x1, x2, by = \"time\"))) %&gt;%\n    map(~ rename_with(.x, ~ c(\"time\", str_c(\"V\", 1:((n_coeff_sim + 1) * (n_stoch_sim + 1)))))) %&gt;%\n    map(ts_long) %&gt;%\n    extract2(ser_i) %&gt;%\n    ggplot(aes(x = time)) +\n    geom_line(aes(y = value, group = id), linetype = 1, alpha = 0.8, size = 0.8, color = \"seagreen\") +\n    labs(x = NULL, y = str_glue(\"{ser_i}\")) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\")\n  print(plot_out)\n}\n\nfor (ser_i in scen_model$vendog) { # ser_i = scen_model$vendog[1]\n  plot_out &lt;- scen_model_stochdev %&gt;%\n    transpose() %&gt;%\n    map_depth(2, ts_wide) %&gt;%\n    map(~ reduce(.x, function(x1, x2) full_join(x1, x2, by = \"time\"))) %&gt;%\n    map(~ rename_with(.x, ~ c(\"time\", str_c(\"V\", 1:((n_coeff_sim + 1) * (n_stoch_sim)))))) %&gt;%\n    map(ts_long) %&gt;%\n    extract2(ser_i) %&gt;%\n    ggplot(aes(x = time)) +\n    geom_line(aes(y = value, group = id), linetype = 1, alpha = 0.8, size = 0.8, color = \"seagreen\") +\n    labs(x = NULL, y = str_glue(\"{ser_i}\")) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\")\n  print(plot_out)\n}\n\nfor (ser_i in scen_model$vendog) { # ser_i = scen_model$vendog[1]\n  plot_out &lt;- scen_model_quantiles %&gt;%\n    extract2(ser_i) %&gt;%\n    ts_long() %&gt;%\n    ggplot(aes(x = time)) +\n    geom_line(aes(y = value, group = id), linetype = 1, alpha = 0.8, size = 0.8, color = \"seagreen\") +\n    labs(x = NULL, y = str_glue(\"{ser_i}\")) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\")\n  print(plot_out)\n}\n\ndev.off()\n\nThe code iterates through each endogenous variable (ser_i).\nFor each variable, it creates three types of plots:\n\nSimulated levels: Shows all simulated paths of the variable.\nDeviations from the mean forecast: Shows the deviations of each simulated path from the mean forecast.\nQuantiles: Shows the quantiles of the distribution of deviations.\n\nggplot2 is used to create the plots, with geom_line() used to display the paths.\nThe plots are saved to a PDF file (stoch_plot.pdf).\n\nThese plots provide a visual representation of the uncertainty surrounding the forecast. The spread of the simulated paths and the width of the quantile bands indicate the range of possible outcomes. By examining these plots, one can assess the degree of uncertainty associated with different variables and time periods.\nThe script includes an additional set of plots based on smoothed quantile paths, which are generated by applying user-specified adjustment factors to certain quantiles at specific time points and then interpolating the values in between. This allows for incorporating subjective views about the evolution of uncertainty over time. However, the overall logic of plotting the smoothed paths is similar to that described above.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  },
  {
    "objectID": "modselect.html#conclusion",
    "href": "modselect.html#conclusion",
    "title": "8  Model selection and simulation",
    "section": "8.6 Conclusion",
    "text": "8.6 Conclusion\nThis detailed process, combining the strengths of gets and bimets, provides a robust and flexible framework for model selection and evaluation in time series forecasting. The use of indicator variables, diagnostic tests, and quasi-forecast evaluation further enhances the reliability and interpretability of the selected models. The use of stochastic simulation provides valuable insights into the range of possible outcomes and helps to quantify the risks associated with relying solely on a single mean forecast.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model selection and simulation</span>"
    ]
  }
]