# Package management {#sec-renv}

The [renv package](https://rstudio.github.io/renv/articles/renv.html) helps create **r**eproducible **env**ironments for your R projects. Use renv to make R projects more isolated, portable and reproducible.

-   **Isolated**: Installing a new or updated package for one project won't break other projects, and vice versa. That's because renv gives each project its own private library.

-   **Portable**: Easily transport projects from one computer to another, even across different platforms. renv makes it easy to install the packages the project depends on.

-   **Reproducible**: renv records the exact package versions the project depends on, and ensures those exact versions get installed by others who work on the project.

## Getting started

To convert a project to use renv, call `renv::init()`. This adds three new files and directories to the project:

-   The project library, *renv/library*, is a library that contains all packages currently used by the project[^renv-1]. This is the key magic that makes renv work: instead of having one library containing the packages used in every project, renv gives you a separate library for each project. This provides the benefits of isolation: different projects can use different versions of packages, and installing, updating, or removing packages in one project doesn't affect any other project.

-   The lockfile, *renv.lock*, records enough metadata about every package that it can be re-installed on a new machine.

-   renv uses *.Rprofile* to configure the R session to use the project library. This ensures that once renv is turned on for a project, it stays on, until it is deliberately turned off.

[^renv-1]: If you'd like to skip dependency discovery, you can call `renv::init(bare = TRUE)` to initialize a project with an empty project library.

The next important pair of tools is `renv::snapshot()` and `renv::restore()`. `snapshot()` updates the lockfile with metadata about the currently-used packages in the project library. Sharing the lockfile allows other people or other computers to reproduce the current project environment by running `restore()`, which uses the metadata from the lockfile to install exactly the same version of every package. This pair of functions provides the benefits of reproducibility and portability: you are now tracking exactly which package versions you have installed so you can recreate them on other machines.

## Collaboration

One of the reasons to use renv is to make it easier to share code in such a way that everyone gets exactly the same package versions. As above, start by calling `renv::init()`. You'll then need to commit *renv.lock*, *.Rprofile*, *renv/settings.json* and *renv/activate.R* to version control, ensuring that others can recreate your project environment. If you're using git, this is particularly simple because renv will create a *.gitignore*, and you can just commit all suggested files.

Now when one of your collaborators opens this project, renv will automatically bootstrap itself, downloading and installing the appropriate version of renv. It will also ask them if they want to download and install all the packages it needs by running `renv::restore()`.

## Installing packages

If you use renv for multiple projects, you'll have multiple libraries, meaning that you'll often need to install the same package in multiple places. It would be annoying if you had to download (or worse, compile) the package repeatedly, so renv uses a package cache. That means you only ever have to download and install a package once, and for each subsequent install, renv will just add a link from the project library to the global cache. You can learn more about the cache in `vignette("package-install")`.

After installing the package and checking that the code works, you should call `renv::snapshot()` to record the latest package versions in your lockfile. If you're collaborating with others, you'll need to commit those changes to git, and let them know that you've updated the lockfile and they should call `renv::restore()` when they're next working on a project.

## Updating packages

Regularly (at least once a year) update the packages in your project to get the latest versions of all dependencies. Similarly, if you're making major changes to a project that you haven't worked on for a while, it's often a good idea to start with an `renv::update()`[^renv-2] before making any changes to the code.

[^renv-2]: You can also use `update.packages()`, but `renv::update()` works with the same sources that `renv::install()` supports.

After calling `renv::update()`, you should run the code in your project and verify that it still works (or make any changes needed to get it working). Then call `renv::snapshot()` to record the new versions in the lockfile. If you get stuck, and can't get the project to work with the new versions, you can call `renv::restore()` to roll back changes to the project library and revert to the known good state recorded in your lockfile. If you need to roll back to an even older version, take a look at `renv::history()` and `renv::revert()`. `renv::update()` will also update renv itself, ensuring that you get all the latest features.

## Workflow for setting up a project with version control and renv

The ideal sequence of steps to set up a project with version control and renv is as follows:

1.  github

2.  usethis::create_from_github()

3.  renv::init() or renv::restore() git::pull ...

4.  get work done

5.  renv::snapshot()

4.  git

## Additional resources

Overview of `renv`:\
<https://rstudio.github.io/renv/articles/renv.html>



Leveraging git and renv at the end of a working session

Now that we have our nice project setup, we should not forget to leverage it. At the end of a working session you should follow the following steps:

Create a renv::snapshot() to save all the packages you used to your local package directory. Commit all your changes to git. This can be easily done by using the Git pane in RStudio. Push everything to GitHub. Whenever you re-open your Rproject, make sure to start your working session with a Pull from GitHub. That way, you will always work with the most recent version of your project.

Collaborating with `renv`: https://rstudio.github.io/renv/articles/collaborating.html

TL;DR: https://inbo.github.io/git-course/index.html https://happygitwithr.com/
