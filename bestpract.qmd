# Best practices for time series data manipulation {#sec-bestpract}

Use capital letters for series names. Special characters in variable names require putting the name between backticks (e.g. `N@US.A`). Eliminate special characters at the time of loading the data from udaman with the `rename` argument of the `fcutils::get_series()` function ([@sec-io]) or using a long tibble.

``` R
hist_q_mod <- hist_q %>%
  tsbox::ts_tbl() %>%
  dplyr::mutate(id = stringr::str_replace_all(id, c("@" = "_AT_", "\\." = "_")))
```
Revert back to the udaman format with the `fcutils::rename_udaman()` function ([@sec-field]).

Use the *xts* format whenever you need a time series object. Observations in a multivariate xts can be accessed by time and series name in two ways: `mul_var_xts[time, ser_name]` or `mul_var_xts$ser_name[time]`.

Make sure all series are defined on the same range (default start = bnk_start, end = bnk_end). Take advantage of the `fcutils::make_xts()` function and its defaults, e.g. start and end period ([@sec-io]).

``` R
import_xts <- readr::read_csv(here::here("data/raw", stringr::str_glue("{exp_id_a}.csv"))) %>%
  dplyr::arrange(time) %>%
  tsbox::ts_long() %>%
  tsbox::ts_xts() %>%
  tsbox::ts_c(
    temp = fcutils::make_xts(per = "year") # temporary variable to force start and end in import_xts
  ) %>%
  magrittr::extract(, str_subset(colnames(.), "temp", negate = TRUE)) # remove temp
```

<!-- Don't break up multivariate time series (think databank) into individual series in the global environment. -->

If referring directly to a series with a static name, use the `bank$series` notation (this can be used on both the right and the left hand side of the assignment, while `bank[, series]` can only be used for existing series in bank).

``` R
# find the last value in history
dat_end <- fcutils::find_end(hist_q$N_AT_US_Q)
# same as
dat_end <- fcutils::find_end(hist_q[, N_AT_US_Q])
```

Use `[fcutils::p()]` to select a period in xts objects, otherwise use `tsbox::ts_span()` (both in [@sec-tsinfo]).

``` R
# extend series with addfactored level
sol_q$N_AT_US_SOLQ <- hist_q$N_AT_US_Q[p("", dat_end)] %>%
  tsbox::ts_bind(sol_q$NCEN_AT_US_SOLQ[p(dat_end, "")] +
    as.numeric(sol_q$N_AT_US_SOLQ_ADDLEV[dat_end]))
    
# addfactor for growth
sol_q$N_AT_US_SOLQ_ADDGRO[p(dat_end + fcutils::qtrs(1), dat_end + fcutils::qtrs(4))] <- -0.35

# extend history using growth rate
sol_q$N_AT_US_SOLQ <- sol_q$N_AT_US_SOLQ[p("", dat_end)] %>%
  tsbox::ts_chain(tsbox::ts_compound(sol_q$N_AT_US_SOLQ_GRO[p(dat_end, "")]))
```

The `bank[,seriesname]` notation only works for *existing* xts series on the left of the assignment (it can also be used on the right). `seriesname` can be determined at runtime

``` R
# initialize the lhs series in the "bank"
hist_a$temp <- make_xts()
names(hist_a)[names(hist_a) == "temp"] <- stringr::str_glue("E{ser_i}_AT_{cnty_i}_ADD")

# calculate expression and assign to lhs
hist_a[, stringr::str_glue("E{ser_i}_AT_{cnty_i}_SH")] <- 
  (hist_a[, stringr::str_glue("E{ser_i}_AT_{cnty_i}")] / hist_a[, stringr::str_glue("E_NF_AT_{cnty_i}")])
```

Alternatively, make multiple series in *bank* available by `magrittr::%$%` and retrieve inividual series by `fcutils::get_var()` on the right ([@sec-field]).

``` R
hist_a[, stringr::str_glue("E{ser_i}_AT_{cnty_i}_SH")] <- hist_a %$%
  (fcutils::get_var("E{ser_i}_AT_{cnty_i}") / fcutils::get_var("E_NF_AT_{cnty_i}"))
```

Conversion to bimets format requires data in a particular *tslist* format. Convert xts to tslist using `tsbox::ts_tslist()`. The `fcutils::set_attr_tslist()` function adds a "tslist" attribute to a list (both in [@sec-type]).

``` R
# store series as tslist
hist_a_lst <- hist_a %>% 
  tsbox::ts_tslist() %>% 

# convert series to bimets format
hist_a_bimets <- hist_a_lst %>%
  purrr::map(bimets::as.bimets)

# bimets strips the attributes, need to reset them for further manipulation by tsbox
hist_a <- hist_a_bimets %>% 
  fcutils::set_attr_tslist() %>% 
  tsbox::ts_xts()
```

For series collected in a `tslist` on the left of the assignment use the `bank[[seriesname]]` notation (it can also be used on the right). Here the lhs series `seriesname` does not need to exist, and it might be easier to work with `tslist` than `xts` when variable names are determined at runtime.

``` R
# similar to above with a tslist variable
hist_a_lst[[stringr::str_glue("E{ser_i}_AT_{cnty_i}_ADD")]] <- hist_a_lst %$%
  (fcutils::get_var("E{ser_i}_AT_{cnty_i}") - fcutils::get_var("E_NF_AT_{cnty_i}"))
```

## Harness the power of tsbox

Use the converter functions in [`tsbox`](https://www.tsbox.help/reference/index.html) to shift between various data types (`ts_tbl()`, `ts_xts()`, `ts_ts()`, `ts_tslist()`) and reshaping to the long and wide format (`ts_long()`, `ts_wide()`). `tsbox` further contains funtions for time period selection (`ts_span()`), merging and extension operations (`ts_c()`, `ts_bind()`, `ts_chain()`), transformations (`ts_lag()`, `ts_pc()`, `ts_pca()`, `ts_pcy()`, `ts_diff()`, `ts_diffy()`), and index construction (`ts_compound()`, `ts_index()`). These functions are described in [Section @sec-utils]. Consider these tsbox functions before turning to solutions that are specific to the `xts`, `ts`, `dplyr` or `tidyr` packages.
