# Project setup

A [project](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) is a self-contained set of files in a folder (the project folder). Create a new project in RStudio under the File menu or using `usethis::create_project("proj_dir")`. The *.Rproj* file contains the project settings. Open the project by double clicking this file in Finder. The minimum structure of a project includes an *R* folder for scripts, a *data* folder for data, and an *output* folder for reports and plots. If present, the *data/raw* folder contains data external to the project and the *data/processed* folder contains intermediate processed data. 

Use the [renv](https://rstudio.github.io/renv/articles/renv.html) package to store information in the project folder about the libraries used in the project. Use the [here](https://here.r-lib.org) package to create paths relative to the project root. For example, `here::here("data", "raw/file.csv")` returns the path to the file *file.csv* in the *data/raw* folder. Load libraries and put hard coded lines at the top of the script. Use the [conflicted](https://conflicted.r-lib.org) package to detect conflicts across packages and assign preferences. For example, `conflict_prefer("filter", "dplyr")` assigns preference to the `filter` function in the dplyr package over the `filter` function in the stats package. Don't save the workspace on exit (Tools > Global Options > General > Save workspace to .RData on exit > Never or `usethis::use_blank_slate()`). 

Start each pipe with a comment, and if necessary add comments to each line. Enable [Github Copilot](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html) for RStudio; it is free for higher education users. Github Copilot will suggest code based on comments. Use sectioning comments (comments followed by at least four dashes) to separate different parts of the script (they show up in the outline section of the editor pane). Use the [styler](https://styler.r-lib.org) package to format the code. Stick to the `tidyverse` "dialect" and [syntax](https://style.tidyverse.org) as much as possible. 

Use R scripts for coding; don't put the analysis into chunks in markdown documents. Results from R scripts can be rendered in quarto (*qmd*) or Rmarkdown (*Rmd*) documents. Within a *qmd* or *Rmd* document [source the R code](https://bookdown.org/yihui/rmarkdown-cookbook/source-script.html) with the analysis. Alternatively, save the entire workspace or individual objects from the R script containing the analysis, and then load these in the appropriate code chunks of the markdown document. Only render important results in markdown chunks. Make sure the code chunks are looking for [objects in the correct working directory](https://bookdown.org/yihui/rmarkdown-cookbook/working-directory.html). 

Store secrets, passwords, and keys with the [keyring](https://keyring.r-lib.org/index.html) package. For example, set the UDAMAN token with  `keyring::key_set_with_value(service = "udaman_token", password = "-ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890=")` and retrieve it with `keyring::key_get("udaman_token")`. Do not store/assign the retrieved credentials to a variable. Environment variables such as API keys can also be stored in a project specific *.Renviron* file; it must end with `\n`. In addition to *.Renviron*, the *.Rprofile* file is also executed each time R starts up. The latter typically contains a script with options and startup tasks. Both files are located in the project root folder. 


## Additional resources

Overview of R setup:\
[https://rstats.wtf](https://rstats.wtf)

Best practices:\
[https://kdestasio.github.io/post/r_best_practices/](https://kdestasio.github.io/post/r_best_practices/)

Considerations for structuring projects:\
[https://www.r-bloggers.com/2018/08/structuring-r-projects/](https://www.r-bloggers.com/2018/08/structuring-r-projects/)

Set up your work in projects:\
[https://r4ds.hadley.nz/workflow-scripts#projects](https://r4ds.hadley.nz/workflow-scripts#projects)

Efficient data management in R:\
[https://www.r-bloggers.com/2020/02/efficient-data-management-in-r/](https://www.r-bloggers.com/2020/02/efficient-data-management-in-r/)

Efficient R programming:\
[https://csgillespie.github.io/efficientR/](https://csgillespie.github.io/efficientR/)

Data science workflow: \
[http://dcl-workflow.stanford.edu](http://dcl-workflow.stanford.edu)
